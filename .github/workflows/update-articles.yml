name: Update Substack Articles

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # Allow manual trigger

jobs:
  update-articles:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm install xml2js
        
    - name: Fetch and parse RSS feed
      run: |
        cat > update-articles.js << 'EOF'
        const https = require('https');
        const fs = require('fs');
        const { parseString } = require('xml2js');
        
        const RSS_URL = 'https://trysnowball.substack.com/feed';
        
        // Helper function to extract plain text from HTML
        function stripHtml(html) {
          return html.replace(/<[^>]*>/g, '').trim();
        }
        
        // Helper function to estimate read time
        function estimateReadTime(content) {
          const words = stripHtml(content).split(/\s+/).length;
          const minutes = Math.ceil(words / 200); // 200 words per minute
          return `${minutes} min read`;
        }
        
        // Helper function to categorize articles
        function categorizeArticle(title, content) {
          const titleLower = title.toLowerCase();
          const contentLower = content.toLowerCase();
          
          if (titleLower.includes('built') || titleLower.includes('tool') || contentLower.includes('personal')) {
            return { category: 'Personal Story', categoryColor: 'blue' };
          }
          if (titleLower.includes('spending') || titleLower.includes('impulse') || titleLower.includes('sales')) {
            return { category: 'Spending Tips', categoryColor: 'green' };
          }
          if (titleLower.includes('why') || titleLower.includes('made') || titleLower.includes('story')) {
            return { category: 'Origin Story', categoryColor: 'purple' };
          }
          if (titleLower.includes('debt') || titleLower.includes('payoff') || titleLower.includes('snowball')) {
            return { category: 'Debt Strategy', categoryColor: 'red' };
          }
          if (titleLower.includes('money') || titleLower.includes('finance') || titleLower.includes('budget')) {
            return { category: 'Money Tips', categoryColor: 'yellow' };
          }
          
          return { category: 'Financial Insights', categoryColor: 'indigo' };
        }
        
        // Fetch RSS feed
        https.get(RSS_URL, (res) => {
          let data = '';
          
          res.on('data', (chunk) => {
            data += chunk;
          });
          
          res.on('end', () => {
            // Parse XML
            parseString(data, (err, result) => {
              if (err) {
                console.error('Error parsing RSS:', err);
                process.exit(1);
              }
              
              const articles = [];
              const items = result.rss.channel[0].item || [];
              
              items.forEach(item => {
                const title = item.title[0];
                const description = item.description[0];
                const link = item.link[0];
                const pubDate = new Date(item.pubDate[0]);
                
                // Extract excerpt (first sentence or 150 chars)
                const plainDescription = stripHtml(description);
                let excerpt = plainDescription.split('.')[0];
                if (excerpt.length > 150) {
                  excerpt = plainDescription.substring(0, 150) + '...';
                }
                
                const readTime = estimateReadTime(description);
                const { category, categoryColor } = categorizeArticle(title, description);
                
                articles.push({
                  title,
                  excerpt,
                  url: link,
                  publishedDate: pubDate.toISOString().split('T')[0],
                  readTime,
                  category,
                  categoryColor
                });
              });
              
              // Sort by date (newest first)
              articles.sort((a, b) => new Date(b.publishedDate) - new Date(a.publishedDate));
              
              // Create articles.json
              const articlesData = {
                articles,
                lastUpdated: new Date().toISOString()
              };
              
              // Write to file
              fs.writeFileSync('./trysnowball-frontend/public/articles.json', JSON.stringify(articlesData, null, 2));
              
              console.log(`Updated ${articles.length} articles`);
            });
          });
        }).on('error', (err) => {
          console.error('Error fetching RSS:', err);
          process.exit(1);
        });
        EOF
        
        node update-articles.js
        
    - name: Check if there are changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add trysnowball-frontend/public/articles.json
        git commit -m "Update Substack articles from RSS feed

        ðŸ¤– Automated update via GitHub Actions
        
        Articles updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        git push
        
    - name: No changes detected
      if: steps.verify-changed-files.outputs.changed == 'false'
      run: echo "No changes detected in articles.json"