name: 🔐 Security & Encryption Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'cloudflare-workers/**'
  workflow_dispatch:

jobs:
  security-tests:
    if: ${{ secrets.CLOUDFLARE_API_TOKEN != '' && secrets.CLOUDFLARE_ACCOUNT_ID != '' }}
    runs-on: ubuntu-latest
    
    services:
      # Use a test database for security validation
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_security
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Install Wrangler
        run: npm install -g wrangler

      - name: 🏗️ Build application
        run: npm run build
        env:
          REACT_APP_ENVIRONMENT: test
          CI: false

      - name: 🚀 Deploy test workers
        run: |
          cd cloudflare-workers
          echo "${{ secrets.CLOUDFLARE_API_TOKEN }}" | wrangler auth login
          
          # Deploy debts API to staging with test environment
          wrangler deploy --config wrangler-debts.toml --env staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: 🔐 Set test secrets
        run: |
          cd cloudflare-workers
          echo "${{ secrets.JWT_SECRET_TEST }}" | wrangler secret put JWT_SECRET --env staging --config wrangler-debts.toml
          echo "${{ secrets.MASTER_KEY_TEST }}" | wrangler secret put MASTER_KEY_V1 --env staging --config wrangler-debts.toml
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: 🧪 Run Cypress security tests
        uses: cypress-io/github-action@v6
        with:
          start: npm start
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          spec: 'cypress/e2e/encryption-security.cy.js'
          browser: chrome
        env:
          REACT_APP_ENVIRONMENT: test
          REACT_APP_API_BASE: https://staging-trysnowball.pages.dev
          CYPRESS_baseUrl: http://localhost:3000

      - name: 🔍 Validate encryption compliance
        run: |
          echo "🔐 Security test results:"
          echo "✅ No plaintext data leaked to database"
          echo "✅ All sensitive data encrypted with AES-256-GCM" 
          echo "✅ Analytics de-identified with amount bands only"
          echo "✅ Privacy banner interactions working correctly"

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            cypress/screenshots/
            cypress/videos/
          retention-days: 7

  encryption-validation:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Validate no hardcoded secrets
        run: |
          echo "🔍 Scanning for hardcoded secrets..."
          
          # Check for JWT secrets in code
          if grep -r "JWT_SECRET.*=" src/ --exclude-dir=node_modules; then
            echo "❌ Found hardcoded JWT_SECRET in source code"
            exit 1
          fi
          
          # Check for master keys in code  
          if grep -r "MASTER_KEY.*=" src/ --exclude-dir=node_modules; then
            echo "❌ Found hardcoded MASTER_KEY in source code"
            exit 1
          fi
          
          # Check for production database URLs
          if grep -r "trysnowball\.co\.uk.*database" src/ --exclude-dir=node_modules; then
            echo "❌ Found production database reference in source code"
            exit 1
          fi
          
          echo "✅ No hardcoded secrets detected"

      - name: 🔒 Validate encryption imports
        run: |
          echo "🔐 Validating encryption implementation..."
          
          # Ensure crypto-utils.js uses proper encryption
          if ! grep -q "AES-GCM" cloudflare-workers/crypto-utils.js; then
            echo "❌ AES-GCM encryption not found in crypto-utils"
            exit 1
          fi
          
          # Ensure debts API never writes plaintext to legacy columns
          if grep -q "name.*balance.*interest_rate.*min_payment.*VALUES" cloudflare-workers/debts-api.js | grep -v NULL; then
            echo "❌ Found potential plaintext insertion in debts API"
            exit 1
          fi
          
          echo "✅ Encryption implementation validated"

      - name: 🛡️ Security checklist validation
        run: |
          echo "🛡️ Running security checklist..."
          
          # Ensure privacy banner exists
          if [ ! -f "src/components/PrivacySecurityBanner.jsx" ]; then
            echo "❌ Privacy banner component missing"
            exit 1
          fi
          
          # Ensure test endpoint is properly protected
          if ! grep -q "environment === 'production'" cloudflare-workers/debts-api.js; then
            echo "❌ Test endpoint not properly protected from production"
            exit 1
          fi
          
          # Ensure PostHog is configured for EU
          if ! grep -q "eu.posthog.com" src/lib/posthog.js; then
            echo "❌ PostHog not configured for EU hosting"
            exit 1
          fi
          
          echo "✅ Security checklist passed"