name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        node: [18, 20]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Cache Cypress binary
        uses: actions/cache@v4
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Install dependencies
        env:
          NPM_CONFIG_AUDIT: 'false'
          NPM_CONFIG_FUND: 'false'
        run: npm ci --ignore-scripts --no-audit --no-fund
        timeout-minutes: 10

      - name: Security check
        run: npm run ci:security
        timeout-minutes: 5

      - name: Lint (optional)
        run: npm run lint
        continue-on-error: true
        timeout-minutes: 5

      - name: Start test server and run E2E tests
        env:
          CI: 'true'
          NODE_OPTIONS: --max-old-space-size=2048
        run: |
          echo "🚧 Unit tests quarantined due to Jest/Babel config issues"
          echo "🌲 Running Cypress E2E tests as CI gatekeeper instead"
          
          # Start the app in the background
          npm start &
          APP_PID=$!
          
          # Wait for app to be ready
          echo "⏳ Waiting for app to start on http://localhost:3000..."
          npx wait-on http://localhost:3000 --timeout=60000
          
          # Run Cypress tests (testids-only version + milestone celebration)
          npx cypress run --headless --browser chrome --spec "cypress/e2e/critical-flows-testids-only.cy.js,cypress/e2e/milestone-celebration.cy.js" || {
            echo "❌ E2E tests failed"
            kill $APP_PID 2>/dev/null || true
            exit 1
          }
          
          # Clean up
          kill $APP_PID 2>/dev/null || true
        timeout-minutes: 20

      - name: Upload Cypress artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts-node${{ matrix.node }}
          path: |
            cypress/videos/**
            cypress/screenshots/**
            cypress/logs/**
          retention-days: 3

      - name: Debug on failure (process snapshot)
        if: failure()
        run: |
          echo "::group::Node processes"
          ps -aux | grep node || true
          echo "::endgroup::"

      - name: Build (CRA)
        env:
          CI: 'true'
          SKIP_PREFLIGHT_CHECK: 'true'
        run: npm run build
        timeout-minutes: 10

      - name: Seed Data Guardrail
        shell: bash
        run: |
          echo "🛡️ Checking for demo data leaks in production build..."
          set -e
          # UTF-8 for the £ symbol
          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8

          DEMO_PATTERNS=(
            "£43,905"
            "demo@"
            "demo123"
            "test@example.com"
            "PayPal.*£1,200"
            "Barclaycard.*£8,500"
            "Halifax.*£15,000"
            "MBNA.*£18,812"
          )

          FOUND_DEMO=false
          for pattern in "${DEMO_PATTERNS[@]}"; do
            if grep -RInE --binary-files=without-match -I "$pattern" build/ 2>/dev/null; then
              echo "❌ DEMO DATA FOUND: '$pattern' detected in production build"
              FOUND_DEMO=true
            fi
          done

          if [ "$FOUND_DEMO" = true ]; then
            echo "🚫 Build contains demo data - failing CI"
            exit 1
          fi
          echo "✅ No demo data found in production build"

      - name: Bundle Size Budget Check (<= 300KB gzipped per chunk)
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const zlib = require('zlib');

          const dir = 'build/static/js';
          const limitBytes = 300 * 1024; // 300KB
          if (!fs.existsSync(dir)) {
            console.log('No JS bundle dir found, skipping.');
            process.exit(0);
          }
          const files = fs.readdirSync(dir).filter(f => f.endsWith('.js'));
          if (!files.length) {
            console.log('No JS chunks found, skipping.');
            process.exit(0);
          }
          let over = false;
          for (const f of files) {
            const p = path.join(dir, f);
            const buf = fs.readFileSync(p);
            const gz = zlib.gzipSync(buf, { level: 9 });
            const size = gz.length;
            const kb = (size/1024).toFixed(1);
            console.log(`📄 ${f}: ${kb} kB (gzipped)`);
            if (size > limitBytes) {
              console.log(`❌ BUNDLE TOO LARGE: ${f} (${kb} kB) > 300.0 kB`);
              over = true;
            }
          }
          if (over) {
            console.log("🚫 Bundle size budget exceeded - failing CI");
            process.exit(1);
          }
          console.log("✅ All bundles within size budget");
          NODE

      - name: Auth Canary Test (production only)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "🔐 Running auth canary test against production..."
          set -e
          # Health check without jq dependency
          HEALTH=$(curl -fsS --max-time 10 https://trysnowball.co.uk/health || true)
          if [ -z "$HEALTH" ]; then
            echo "⚠️ /health did not respond - skipping auth test"
            exit 0
          fi
          # Basic JSON validity check using Node
          echo "$HEALTH" | node -e "let s='';process.stdin.on('data',d=>s+=d);process.stdin.on('end',()=>{try{const j=JSON.parse(s); if(!j.ok){process.exit(2)} }catch(e){process.exit(1)}})" || {
            code=$?
            if [ "$code" -eq 1 ]; then
              echo "❌ /health did not return valid JSON"; exit 1
            fi
            echo "⚠️ /health ok=false - skipping auth test"; exit 0
          }

          # Hit /auth/me with an invalid token; require JSON response
          AUTH_RESPONSE=$(curl -fsS --max-time 10 \
            -H "Authorization: Bearer invalid-token-for-testing" \
            -H "Content-Type: application/json" \
            https://trysnowball.co.uk/auth/me || true)

          if [ -z "$AUTH_RESPONSE" ]; then
            echo "❌ /auth/me no response"; exit 1
          fi

          echo "$AUTH_RESPONSE" | node -e "let s='';process.stdin.on('data',d=>s+=d);process.stdin.on('end',()=>{try{JSON.parse(s);process.exit(0)}catch(e){process.exit(1)}})" \
            || { echo "❌ /auth/me not JSON"; echo "Response: $AUTH_RESPONSE"; exit 1; }

          echo "✅ Auth endpoint is responding with valid JSON"

      - name: Upload production build artifact (Node 20 only)
        if: matrix.node == 20
        uses: actions/upload-artifact@v4
        with:
          name: snowball-build
          path: build
          if-no-files-found: error
          retention-days: 3

  # Dependabot automerge gate
  label-safe-for-automerge:
    needs: test-and-build
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Add automerge label for safe updates
        if: >
          contains(github.event.pull_request.body, '"dependencyType":"devDependencies"') ||
          contains(github.event.pull_request.title, 'chore(deps): bump')
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: automerge-ok