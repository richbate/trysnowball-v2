openapi: "3.0.3"
info:
  title: "TrySnowball API"
  description: "Complete API reference for TrySnowball debt management platform with enterprise-grade security"
  version: "2.0.0"
  contact:
    name: "TrySnowball Support"
    url: "https://trysnowball.co.uk"
    email: "support@trysnowball.co.uk"
  license:
    name: "Proprietary"
    url: "https://trysnowball.co.uk/terms"
servers:
  -
    url: "https://trysnowball.co.uk"
    description: "Production server"
  -
    url: "https://staging-trysnowball.pages.dev"
    description: "Staging server"
  -
    url: "http://localhost:3000"
    description: "Development server"
components:
  securitySchemes:
    BearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
      description: "JWT token obtained via magic link authentication"
    ClientID:
      type: "apiKey"
      in: "header"
      name: "x-client-id"
      description: "Trusted client identifier for API access control"
  schemas:
    UKDebt:
      type: "object"
      required:
        - name
        - amount
        - apr
        - min_payment
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "Unique debt identifier"
        name:
          type: "string"
          description: "Debt name (e.g., "Credit Card", "Personal Loan")"
          example: "Credit Card"
        amount:
          type: "number"
          format: "float"
          minimum: 0
          description: "Current debt balance in pounds"
          example: 1234.56
        apr:
          type: "number"
          format: "float"
          minimum: 0
          maximum: 100
          description: "Annual percentage rate"
          example: 19.9
        min_payment:
          type: "number"
          format: "float"
          minimum: 0
          description: "Minimum monthly payment in pounds"
          example: 45
        debt_type:
          type: "string"
          enum:
            - credit_card
            - personal_loan
            - student_loan
            - other
          default: "credit_card"
          description: "Type of debt"
        created_at:
          type: "string"
          format: "date-time"
          description: "Creation timestamp"
        updated_at:
          type: "string"
          format: "date-time"
          description: "Last update timestamp"
    User:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "User identifier"
        email:
          type: "string"
          format: "email"
          description: "User email address"
        isPro:
          type: "boolean"
          description: "Whether user has Pro subscription"
        plan:
          type: "string"
          enum:
            - free
            - pro
            - founder
          description: "User subscription plan"
        created_at:
          type: "string"
          format: "date-time"
          description: "Account creation date"
    ErrorResponse:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Human-readable error message"
        code:
          type: "string"
          description: "Machine-readable error code"
        status:
          type: "integer"
          description: "HTTP status code"
    SecurityError:
      type: "object"
      properties:
        error:
          type: "string"
          description: "Security error message"
        code:
          type: "string"
          enum:
            - INVALID_CLIENT_ID
            - RATE_LIMIT_EXCEEDED
            - INSUFFICIENT_SCOPE
            - USER_NOT_AUTHORIZED
          description: "Security error code"
        message:
          type: "string"
          description: "Detailed error explanation"
        retryAfter:
          type: "integer"
          description: "Seconds to wait before retry (for rate limiting)"
  responses:
    BadRequestError:
      description: "Bad request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    UnauthorizedError:
      description: "Authentication required"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    SecurityError:
      description: "Security violation (invalid client, rate limit, insufficient scope)"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecurityError"
    RateLimitError:
      description: "Rate limit exceeded"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecurityError"
    NotFoundError:
      description: "Resource not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
security:
  -
    BearerAuth:
    ClientID:
paths:
  /api/clean/debts:
    get:
      operationId: "debts_getAll"
      summary: "Get all debts"
      description: "Fetch all debts for the authenticated user with encryption/decryption"
      tags:
        - Debts
      security:
        -
          BearerAuth:
          ClientID:
      parameters:
        -
          name: "x-client-id"
          in: "header"
          required: true
          schema:
            type: "string"
            enum:
              - web-v1
              - web-v1-staging
              - mobile-v1
              - dev-local
          description: "Trusted client identifier"
      responses:
        200:
          description: "List of user debts"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  debts:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/UKDebt"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/SecurityError"
        429:
          $ref: "#/components/responses/RateLimitError"
    post:
      operationId: "debts_create"
      summary: "Create new debt"
      description: "Add a new debt to the user's profile with automatic encryption"
      tags:
        - Debts
      security:
        -
          BearerAuth:
          ClientID:
      parameters:
        -
          name: "x-client-id"
          in: "header"
          required: true
          schema:
            type: "string"
            enum:
              - web-v1
              - web-v1-staging
              - mobile-v1
              - dev-local
          description: "Trusted client identifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UKDebt"
      responses:
        201:
          description: "Debt created successfully"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  debt:
                    $ref: "#/components/schemas/UKDebt"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/SecurityError"
        429:
          $ref: "#/components/responses/RateLimitError"
  /api/clean/debts/{id}:
    put:
      operationId: "debts_update"
      summary: "Update existing debt"
      description: "Update debt information with re-encryption"
      tags:
        - Debts
      security:
        -
          BearerAuth:
          ClientID:
      parameters:
        -
          name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
          description: "Debt ID"
        -
          name: "x-client-id"
          in: "header"
          required: true
          schema:
            type: "string"
            enum:
              - web-v1
              - web-v1-staging
              - mobile-v1
              - dev-local
          description: "Trusted client identifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UKDebt"
      responses:
        200:
          description: "Debt updated successfully"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/SecurityError"
        404:
          $ref: "#/components/responses/NotFoundError"
        429:
          $ref: "#/components/responses/RateLimitError"
    delete:
      operationId: "debts_delete"
      summary: "Delete debt"
      description: "Remove debt from user profile with secure deletion"
      tags:
        - Debts
      security:
        -
          BearerAuth:
          ClientID:
      parameters:
        -
          name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
          description: "Debt ID"
        -
          name: "x-client-id"
          in: "header"
          required: true
          schema:
            type: "string"
            enum:
              - web-v1
              - web-v1-staging
              - mobile-v1
              - dev-local
          description: "Trusted client identifier"
      responses:
        200:
          description: "Debt deleted successfully"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/SecurityError"
        404:
          $ref: "#/components/responses/NotFoundError"
        429:
          $ref: "#/components/responses/RateLimitError"
  /auth/me:
    get:
      operationId: "auth_me"
      summary: "Get current user"
      description: "Fetch authenticated user information with allowlist validation"
      tags:
        - Authentication
      security:
        -
          BearerAuth:
          ClientID:
      parameters:
        -
          name: "x-client-id"
          in: "header"
          required: true
          schema:
            type: "string"
            enum:
              - web-v1
              - web-v1-staging
              - mobile-v1
              - dev-local
          description: "Trusted client identifier"
      responses:
        200:
          description: "Current user information"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/SecurityError"
        429:
          $ref: "#/components/responses/RateLimitError"
  /auth/refresh:
    get:
      operationId: "auth_refresh"
      summary: "Refresh JWT token"
      description: "Get a new JWT token with updated scopes using current valid token"
      tags:
        - Authentication
      security:
        -
          BearerAuth:
          ClientID:
      parameters:
        -
          name: "x-client-id"
          in: "header"
          required: true
          schema:
            type: "string"
            enum:
              - web-v1
              - web-v1-staging
              - mobile-v1
              - dev-local
          description: "Trusted client identifier"
      responses:
        200:
          description: "New token generated"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  token:
                    type: "string"
                    description: "New JWT token with updated scopes"
                  expires_in:
                    type: "integer"
                    description: "Token expiry in seconds"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/SecurityError"
        429:
          $ref: "#/components/responses/RateLimitError"
  /auth/logout:
    get:
      operationId: "auth_logout"
      summary: "Logout user"
      description: "Clear user session and invalidate tokens"
      tags:
        - Authentication
      security:
        -
          BearerAuth:
          ClientID:
      parameters:
        -
          name: "x-client-id"
          in: "header"
          required: true
          schema:
            type: "string"
            enum:
              - web-v1
              - web-v1-staging
              - mobile-v1
              - dev-local
          description: "Trusted client identifier"
      responses:
        200:
          description: "Successfully logged out"
        429:
          $ref: "#/components/responses/RateLimitError"
  /auth/request-link:
    post:
      operationId: "auth_requestLink"
      summary: "Request magic link"
      description: "Send magic link email for passwordless authentication"
      tags:
        - Authentication
      parameters:
        -
          name: "x-client-id"
          in: "header"
          required: true
          schema:
            type: "string"
            enum:
              - web-v1
              - web-v1-staging
              - mobile-v1
              - dev-local
          description: "Trusted client identifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - email
              properties:
                email:
                  type: "string"
                  format: "email"
      responses:
        200:
          description: "Magic link sent successfully"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                  email:
                    type: "string"
                    format: "email"
        400:
          $ref: "#/components/responses/BadRequestError"
        403:
          $ref: "#/components/responses/SecurityError"
        429:
          $ref: "#/components/responses/RateLimitError"
  /health:
    get:
      operationId: "health_main"
      summary: "Main health check"
      description: "Check if the main application is running"
      tags:
        - Health
      responses:
        200:
          description: "Service is healthy"
  /auth/health:
    get:
      operationId: "health_auth"
      summary: "Auth service health"
      description: "Check authentication service status"
      tags:
        - Health
      responses:
        200:
          description: "Auth service status"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    enum:
                      - ok
                  service:
                    type: "string"
                    enum:
                      - auth
                  database:
                    type: "string"
                    enum:
                      - D1 connected
