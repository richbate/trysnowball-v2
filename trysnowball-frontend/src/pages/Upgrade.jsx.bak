import React, { useEffect, useState } from 'react';
import { CheckCircle, Crown, Shield, Zap } from 'lucide-react';
import Button from '../components/ui/Button';
import Card from '../components/ui/Card';
import { useAuth } from '../contexts/AuthContext.tsx';
import { capture } from '../utils/analytics';
// If you use react-helmet, uncomment:
// import { Helmet } from 'react-helmet';

export default function Upgrade() {
 const { user, token, plan } = useAuth();
 const [loading, setLoading] = useState(false);
 const isBeta = plan === 'beta';

 useEffect(() => {
  capture('upgrade_page_viewed', { plan, isAuthenticated: !!user });
 }, [plan, user]);

 const handleUpgrade = async () => {
  setLoading(true);
  capture('checkout_started', { planBefore: plan || 'unknown' });
  try {
   const res = await fetch('/api/checkout/session', {
    method: 'POST',
    headers: {
     'Content-Type': 'application/json',
     ...(token ? { Authorization: `Bearer ${token}` } : {}),
    },
    body: JSON.stringify({ priceId: 'price_1S4Kyj9OfFB3mfqAC3ppmvzN' }),
   });
   if (!res.ok) throw new Error('checkout_session_failed');
   const { url } = await res.json();
   if (!url) throw new Error('missing_checkout_url');
   window.location.href = url;
  } catch (e) {
   setLoading(false);
   capture('checkout_failed', { reason: e?.message || 'unknown' });
   alert('Unable to start checkout. Please try again.');
  }
 };

 // Small reusable chip
 const Pill = ({ children }) => (
  <span className="inline-flex items-center gap-1 rounded-full border border-border px-2.5 py-1 text-xs text-text bg-surface/70">
   {children}
  </span>
 );

 if (isBeta) {
  return (
   <div className="min-h-screen bg-bg">
    <div className="mx-auto max-w-3xl px-4 py-10">
    {/* <Helmet><meta name="robots" content="noindex" /></Helmet> */}
    <div className="mx-auto w-16 h-16 rounded-2xl bg-gradient-to-br from-amber-400 to-rose-400 grid place-items-center shadow">
     <Crown className="h-8 w-8 text-white" />
    </div>
    <h1 className="mt-6 text-3xl font-bold">You're on the Open Beta plan ðŸŽ‰</h1>
    <p className="mt-2 text-muted">Your early-bird price is locked in. Thanks for supporting Snowball!</p>

    <Card className="mt-8 p-6">
     <ul className="space-y-3">
      {[
       'Unlimited debts',
       'Sync across devices',
       'Priority support',
       'Future features included',
      ].map((t) => (
       <li key={t} className="flex items-start gap-3">
        <CheckCircle className="mt-0.5 h-5 w-5" />
        <span>{t}</span>
       </li>
      ))}
     </ul>
     <div className="mt-6 flex gap-3">
      <Button to="/account">Go to My Plan</Button>
      <Button variant="secondary" to="/debts">Go to My Debts</Button>
     </div>
    </Card>
    </div>
   </div>
  );
 }

 return (
  <div className="min-h-screen bg-bg">
   <div className="mx-auto max-w-5xl px-4 py-10" data-testid="upgrade-page">
   {/* <Helmet><meta name="robots" content="noindex" /></Helmet> */}
   <div className="mx-auto w-16 h-16 rounded-2xl bg-gradient-to-br from-amber-400 to-rose-400 grid place-items-center shadow">
    <Crown className="h-8 w-8 text-white" />
   </div>

   <header className="mt-6 text-center">
    <h1 className="text-4xl font-extrabold tracking-tight">Join the Open Beta â€“ Â£10/year</h1>
    <p className="mt-2 text-muted">Lock in your early-bird rate for life. Support Snowball as we grow.</p>
    <div className="mt-3 flex items-center justify-center gap-2">
     <Pill><Shield className="h-4 w-4" /> Early-bird lock-in</Pill>
     <Pill><Zap className="h-4 w-4" /> Fast, hosted checkout</Pill>
    </div>
   </header>

   {/* Card layout */}
   <div className="mx-auto mt-8 grid max-w-4xl grid-cols-1 gap-6 md:grid-cols-5">
    {/* Plan card */}
    <Card className="md:col-span-3 p-6">
     <h2 className="text-lg font-semibold">What you get</h2>
     <ul className="mt-4 space-y-3">
      {[
       'Unlimited debts',
       'Full sync across devices',
       'Priority support',
       'Future features included',
      ].map((t) => (
       <li key={t} className="flex items-start gap-3">
        <CheckCircle className="mt-0.5 h-5 w-5" />
        <span>{t}</span>
       </li>
      ))}
     </ul>

     <div className="mt-6">
      <Button
       data-testid="upgrade-now"
       onClick={handleUpgrade}
       disabled={loading || !user}
       className="w-full md:w-auto"
      >
       {loading ? 'Starting checkoutâ€¦' : 'Upgrade Now'}
      </Button>
      {!user && (
       <p className="mt-3 text-sm text-amber-700">
        You'll need to sign in with a magic link before upgrading.
       </p>
      )}
      <p className="mt-4 text-xs text-muted">
       Limited Open Beta pricing â€“ future plans will cost more.
      </p>
     </div>
    </Card>

    {/* Side info card */}
    <Card className="md:col-span-2 p-6">
     <h3 className="text-sm font-semibold uppercase tracking-wide text-muted">Why now?</h3>
     <p className="mt-2 text-sm text-text">
      Open Beta keeps the lights on while we ship faster. You'll keep this price for life.
     </p>
     <div className="mt-4 rounded-xl border border-border bg-surface p-4">
      <p className="text-sm font-medium">What happens after payment?</p>
      <ol className="mt-2 list-decimal pl-5 text-sm text-text space-y-1">
       <li>Stripe opens in a new tab</li>
       <li>Complete checkout</li>
       <li>Return here and your plan switches to <strong>Open Beta</strong></li>
      </ol>
     </div>
    </Card>
   </div>
   </div>
  </div>
 );
}