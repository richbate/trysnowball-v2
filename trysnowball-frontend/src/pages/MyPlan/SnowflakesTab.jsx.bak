import React, { useState, useMemo } from 'react';
import { Plus, Edit2, Trash2, Snowflake } from 'lucide-react';
import { usePostHog } from 'posthog-js/react';
import { track } from '../../lib/analytics';
import { 
 addSnowflake, 
 updateSnowflake, 
 removeSnowflake, 
 loadSnowflakes,
 byMonthAndDebt,
 validateSnowflake,
 formatSnowflakeAmount,
 getMonthLabel
} from '../../lib/snowflakes';
import Button from '../../components/ui/Button';

// Simple timeline comparison for snowflakes impact
function compareTimelines(baseTimeline, withSnowflakesTimeline) {
 if (!baseTimeline?.length || !withSnowflakesTimeline?.length) {
  return { monthsSaved: 0, interestSaved: 0, totalSaved: 0 };
 }
 
 const baseMonths = baseTimeline.length;
 const snowflakeMonths = withSnowflakesTimeline.length;
 const monthsSaved = Math.max(0, baseMonths - snowflakeMonths);
 
 const baseTotalInterest = baseTimeline.reduce((sum, month) => sum + (month.totalInterest || 0), 0);
 const snowflakesTotalInterest = withSnowflakesTimeline.reduce((sum, month) => sum + (month.totalInterest || 0), 0);
 const interestSaved = Math.max(0, Math.round(baseTotalInterest - snowflakesTotalInterest));
 
 return {
  monthsSaved,
  interestSaved,
  totalSaved: interestSaved
 };
}

export default function SnowflakesTab({ 
 debts = [],
 calculateTimeline, 
 inputs = {},
 snowballAmount = 0
}) {
 // Use debts from props to maintain single source of truth
 const posthog = usePostHog();
 const [snowflakes, setSnowflakes] = useState(loadSnowflakes);
 const [showForm, setShowForm] = useState(false);
 const [editingId, setEditingId] = useState(null);
 const [formData, setFormData] = useState({
  debtId: '',
  monthIndex: 0,
  amount: '',
  note: ''
 });
 const [errors, setErrors] = useState({});

 const snowflakesMap = useMemo(() => byMonthAndDebt(snowflakes), [snowflakes]);

 // Calculate impact with and without snowflakes
 const baseTimeline = useMemo(() => {
  if (!calculateTimeline || !inputs.payoffStrategy || !debts.length) return [];
  return calculateTimeline(inputs.payoffStrategy, { ...inputs, debts, snowballAmount });
 }, [calculateTimeline, inputs, debts, snowballAmount]);

 const withSnowflakesTimeline = useMemo(() => {
  if (!calculateTimeline || !inputs.payoffStrategy || !debts.length) return [];
  return calculateTimeline(inputs.payoffStrategy, { 
   ...inputs, 
   debts,
   snowballAmount,
   snowflakesMap 
  });
 }, [calculateTimeline, inputs, debts, snowballAmount, snowflakesMap]);

 const impact = useMemo(() => {
  return compareTimelines(baseTimeline, withSnowflakesTimeline);
 }, [baseTimeline, withSnowflakesTimeline]);

 const totalSnowflakeAmount = useMemo(() => {
  return snowflakes.reduce((sum, sf) => sum + (Number(sf.amount) || 0), 0);
 }, [snowflakes]);

 // Group snowflakes by month for display
 const snowflakesByMonth = useMemo(() => {
  const groups = {};
  snowflakes.forEach(sf => {
   if (!groups[sf.monthIndex]) {
    groups[sf.monthIndex] = [];
   }
   groups[sf.monthIndex].push(sf);
  });
  return groups;
 }, [snowflakes]);

 const handleSubmit = (e) => {
  e.preventDefault();
  
  const validation = validateSnowflake(formData);
  if (!validation.isValid) {
   const errorObj = {};
   validation.errors.forEach(error => {
    if (error.includes('Debt')) errorObj.debtId = error;
    if (error.includes('month')) errorObj.monthIndex = error;
    if (error.includes('Amount')) errorObj.amount = error;
   });
   setErrors(errorObj);
   return;
  }

  const snowflakeData = {
   ...formData,
   amount: Number(formData.amount),
   monthIndex: Number(formData.monthIndex)
  };

  if (editingId) {
   updateSnowflake(editingId, snowflakeData);
   track('snowflake_updated', {
    amount: snowflakeData.amount,
    debtId: snowflakeData.debtId,
    monthIndex: snowflakeData.monthIndex
   });
  } else {
   addSnowflake(snowflakeData);
   track('snowflake_added', {
    amount: snowflakeData.amount,
    debtId: snowflakeData.debtId,
    monthIndex: snowflakeData.monthIndex,
    total_snowflakes: snowflakes.length + 1
   });
  }

  setSnowflakes(loadSnowflakes());
  setShowForm(false);
  setEditingId(null);
  setFormData({ debtId: '', monthIndex: 0, amount: '', note: '' });
  setErrors({});
 };

 const handleEdit = (snowflake) => {
  setFormData({
   debtId: snowflake.debtId,
   monthIndex: snowflake.monthIndex,
   amount: snowflake.amount.toString(),
   note: snowflake.note || ''
  });
  setEditingId(snowflake.id);
  setShowForm(true);
 };

 const handleDelete = (id) => {
  if (window.confirm('Are you sure you want to delete this snowflake?')) {
   const deletedSnowflake = snowflakes.find(s => s.id === id);
   removeSnowflake(id);
   setSnowflakes(loadSnowflakes());
   track('snowflake_deleted', {
    amount: deletedSnowflake?.amount,
    remaining_snowflakes: snowflakes.length - 1
   });
  }
 };

 const handleCancel = () => {
  setShowForm(false);
  setEditingId(null);
  setFormData({ debtId: '', monthIndex: 0, amount: '', note: '' });
  setErrors({});
 };

 const getDebtName = (debtId) => {
  const debt = debts.find(d => d.id === debtId);
  return debt?.name || debt?.label || 'Unknown Debt';
 };

 if (debts.length === 0) {
  return (
   <div className="text-center py-12">
    <Snowflake className="mx-auto h-12 w-12 text-muted mb-4" />
    <h3 className="text-lg font-semibold text-text mb-2">No debts to add snowflakes to</h3>
    <p className="text-muted">Add some debts first to start making extra payments.</p>
   </div>
  );
 }

 return (
  <div className="space-y-6">
   {/* Header with impact summary */}
   <div className="flex items-center justify-between">
    <div>
     <h2 className="text-2xl font-bold text-text">Snowflakes ❄️</h2>
     <p className="text-muted mt-1">One-off extra payments to accelerate your debt freedom</p>
    </div>
    
    {!showForm && (
     <Button
      onClick={() => {
       setShowForm(true);
       track('snowflake_form_opened', {
        existing_snowflakes: snowflakes.length
       });
      }}
      leftIcon={Plus}
      variant="primary"
      size="sm"
     >
      Add Snowflake
     </Button>
    )}
   </div>

   {/* Impact Summary */}
   {snowflakes.length > 0 && (
    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
     <div className="flex items-center justify-between">
      <div>
       <h3 className="font-semibold text-blue-900">Impact Summary</h3>
       <p className="text-sm text-blue-700 mt-1">
        {formatSnowflakeAmount(totalSnowflakeAmount)} in snowflakes
        {impact.monthsSaved > 0 && (
         <> • {impact.monthsSaved} months sooner • save {formatSnowflakeAmount(impact.interestSaved)} in interest</>
        )}
       </p>
      </div>
      <Snowflake className="h-8 w-8 text-blue-600" />
     </div>
    </div>
   )}

   {/* Form */}
   {showForm && (
    <div className="bg-surface border border-border rounded-lg p-6">
     <h3 className="text-lg font-semibold mb-4">
      {editingId ? 'Edit Snowflake' : 'Add New Snowflake'}
     </h3>
     
     <form onSubmit={handleSubmit} className="space-y-4">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
       {/* Debt Selection */}
       <div>
        <label className="block text-sm font-medium text-text mb-2">
         Debt
        </label>
        <select
         value={formData.debtId}
         onChange={(e) => setFormData({ ...formData, debtId: e.target.value })}
         className={`w-full bg-surface text-text border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary transition-colors ${
          errors.debtId ? 'border-danger' : 'border-border'
         }`}
         required
        >
         <option value="">Select a debt</option>
         {debts.map(debt => (
          <option key={debt.id} value={debt.id}>
           {debt.name || debt.label}
          </option>
         ))}
        </select>
        {errors.debtId && (
         <p className="text-sm text-danger mt-1">{errors.debtId}</p>
        )}
       </div>

       {/* Month Selection */}
       <div>
        <label className="block text-sm font-medium text-text mb-2">
         Month
        </label>
        <select
         value={formData.monthIndex}
         onChange={(e) => setFormData({ ...formData, monthIndex: Number(e.target.value) })}
         className={`w-full bg-surface text-text border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary transition-colors ${
          errors.monthIndex ? 'border-danger' : 'border-border'
         }`}
         required
        >
         {Array.from({ length: 60 }, (_, i) => (
          <option key={i} value={i}>
           {getMonthLabel(i)} {i === 0 && '(This month)'}
          </option>
         ))}
        </select>
        {errors.monthIndex && (
         <p className="text-sm text-danger mt-1">{errors.monthIndex}</p>
        )}
       </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
       {/* Amount */}
       <div>
        <label className="block text-sm font-medium text-text mb-2">
         Amount (£)
        </label>
        <input
         type="number"
         step="0.01"
         min="0.01"
         value={formData.amount}
         onChange={(e) => setFormData({ ...formData, amount: e.target.value })}
         className={`w-full bg-surface text-text border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary ${
          errors.amount ? 'border-danger' : 'border-border'
         }`}
         placeholder="0.00"
         required
        />
        {errors.amount && (
         <p className="text-sm text-danger mt-1">{errors.amount}</p>
        )}
       </div>

       {/* Note */}
       <div>
        <label className="block text-sm font-medium text-text mb-2">
         Note (optional)
        </label>
        <input
         type="text"
         value={formData.note}
         onChange={(e) => setFormData({ ...formData, note: e.target.value })}
         className="w-full bg-surface text-text border border-border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary"
         placeholder="e.g., Tax refund, bonus"
        />
       </div>
      </div>

      <div className="flex gap-2 pt-4">
       <Button type="submit" variant="primary" size="sm">
        {editingId ? 'Update Snowflake' : 'Add Snowflake'}
       </Button>
       <Button 
        type="button" 
        variant="ghost" 
        size="sm"
        onClick={handleCancel}
       >
        Cancel
       </Button>
      </div>
     </form>
    </div>
   )}

   {/* Snowflakes List */}
   {snowflakes.length === 0 ? (
    <div className="text-center py-12 bg-bg rounded-lg">
     <Snowflake className="mx-auto h-12 w-12 text-muted mb-4" />
     <h3 className="text-lg font-semibold text-text mb-2">No snowflakes yet</h3>
     <p className="text-muted mb-4">
      Add one-off extra payments to pay down debts faster
     </p>
     {!showForm && (
      <Button
       onClick={() => setShowForm(true)}
       leftIcon={Plus}
       variant="primary"
       size="sm"
      >
       Add Your First Snowflake
      </Button>
     )}
    </div>
   ) : (
    <div className="space-y-4">
     {Object.keys(snowflakesByMonth)
      .sort((a, b) => Number(b) - Number(a)) // Sort months descending
      .map(monthIndex => (
       <div key={monthIndex} className="bg-surface border border-border rounded-lg p-4">
        <h3 className="font-semibold text-text mb-3">
         {getMonthLabel(Number(monthIndex))}
         {Number(monthIndex) === 0 && ' (This month)'}
        </h3>
        
        <div className="space-y-2">
         {snowflakesByMonth[monthIndex].map(snowflake => (
          <div key={snowflake.id} className="flex items-center justify-between p-3 bg-bg rounded-lg">
           <div className="flex-1">
            <div className="flex items-center gap-2">
             <span className="font-medium text-text">
              {formatSnowflakeAmount(snowflake.amount)}
             </span>
             <span className="text-muted">→</span>
             <span className="text-text">
              {getDebtName(snowflake.debtId)}
             </span>
            </div>
            {snowflake.note && (
             <p className="text-sm text-muted mt-1">{snowflake.note}</p>
            )}
           </div>
           
           <div className="flex gap-1">
            <button
             onClick={() => handleEdit(snowflake)}
             className="p-2 text-muted hover:text-primary rounded"
            >
             <Edit2 className="h-4 w-4" />
            </button>
            <button
             onClick={() => handleDelete(snowflake.id)}
             className="p-2 text-muted hover:text-danger rounded"
            >
             <Trash2 className="h-4 w-4" />
            </button>
           </div>
          </div>
         ))}
        </div>
       </div>
      ))}
    </div>
   )}
  </div>
 );
}