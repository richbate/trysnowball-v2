import React, { useState, useCallback } from 'react';
import { Plus, Target, TrendingUp, DollarSign, CheckCircle } from 'lucide-react';
import { useGoalSelectors } from '../../hooks/selectors/useGoalSelectors';
import Button from '../../components/ui/Button';
import { formatCurrency } from '../../utils/debtFormatting';
import { track } from '../../lib/analytics';

const GoalCard = ({ goal, onEdit, onDelete }) => {
 const getIcon = () => {
  switch (goal.type) {
   case 'debt_payoff':
    return <Target className="w-5 h-5" />;
   case 'debt_reduction':
    return <TrendingUp className="w-5 h-5" />;
   case 'payment_boost':
    return <DollarSign className="w-5 h-5" />;
   default:
    return <CheckCircle className="w-5 h-5" />;
  }
 };

 const getProgressColor = () => {
  if (goal.isComplete) return 'bg-green-500';
  if (goal.progressPct > 50) return 'bg-blue-500';
  if (goal.progressPct > 0) return 'bg-yellow-500';
  return 'bg-gray-300';
 };

 return (
  <div className={`bg-white rounded-lg p-6 shadow-sm border ${goal.isComplete ? 'border-green-200 bg-green-50/30' : 'border-gray-200'}`}>
   <div className="flex items-start justify-between mb-4">
    <div className="flex items-center space-x-3">
     <div className={`p-2 rounded-lg ${goal.isComplete ? 'bg-green-100 text-green-600' : 'bg-blue-100 text-blue-600'}`}>
      {getIcon()}
     </div>
     <div>
      <h3 className="font-semibold text-gray-900">{goal.title}</h3>
      <p className="text-sm text-gray-500">
       {goal.type === 'debt_payoff' && 'Pay off this debt completely'}
       {goal.type === 'debt_reduction' && `Reduce total debt by ${formatCurrency(goal.target)}`}
       {goal.type === 'payment_boost' && `Increase monthly payment to ${formatCurrency(goal.target)}`}
      </p>
     </div>
    </div>
    {goal.isComplete && (
     <span className="text-green-600 text-sm font-medium">âœ“ Complete</span>
    )}
   </div>

   <div className="space-y-2">
    <div className="flex justify-between text-sm">
     <span className="text-gray-600">Progress</span>
     <span className="font-medium">{goal.progressPct}%</span>
    </div>
    <div className="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
     <div 
      className={`h-full transition-all duration-500 ${getProgressColor()}`}
      style={{ width: `${goal.progressPct}%` }}
     />
    </div>
    {goal.type === 'debt_payoff' && goal.progress > 0 && (
     <p className="text-sm text-gray-600 mt-2">
      {formatCurrency(goal.progress)} paid off so far
     </p>
    )}
   </div>
  </div>
 );
};

const GoalsTab = () => {
 const { 
  goals, 
  activeGoals, 
  completedGoals, 
  hasGoals, 
  nextMilestone,
  overallProgress 
 } = useGoalSelectors();
 
 const [showAddGoal, setShowAddGoal] = useState(false);

 const handleAddGoal = useCallback(() => {
  setShowAddGoal(true);
  track('goal_creation_started', {
   existing_goals: goals.length,
   active_goals: activeGoals.length
  });
 }, [goals.length, activeGoals.length]);

 if (!hasGoals) {
  return (
   <div className="text-center py-12">
    <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
     <Target className="w-8 h-8 text-blue-600" />
    </div>
    <h2 className="text-2xl font-bold text-gray-900 mb-2">Set Your First Goal</h2>
    <p className="text-gray-600 mb-6">
     Goals help you stay motivated and track your progress towards debt freedom
    </p>
    <Button
     onClick={handleAddGoal}
     variant="primary"
     leftIcon={Plus}
    >
     Create Your First Goal
    </Button>
   </div>
  );
 }

 return (
  <div className="space-y-6">
   {/* Header Section */}
   <div className="flex justify-between items-start">
    <div>
     <h2 className="text-2xl font-bold text-gray-900 mb-2">Your Goals</h2>
     <p className="text-gray-600">
      Track your progress towards debt freedom milestones
     </p>
    </div>
    <Button
     onClick={handleAddGoal}
     variant="secondary"
     size="sm"
     leftIcon={Plus}
    >
     Add Goal
    </Button>
   </div>

   {/* Overall Progress */}
   {hasGoals && (
    <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-6 border border-blue-200">
     <div className="flex justify-between items-center mb-3">
      <h3 className="font-semibold text-gray-900">Overall Progress</h3>
      <span className="text-2xl font-bold text-blue-600">{overallProgress}%</span>
     </div>
     <div className="w-full bg-white rounded-full h-3 overflow-hidden">
      <div 
       className="h-full bg-gradient-to-r from-blue-500 to-indigo-500 transition-all duration-500"
       style={{ width: `${overallProgress}%` }}
      />
     </div>
     {nextMilestone && (
      <p className="text-sm text-gray-600 mt-3">
       Next milestone: {nextMilestone.title} 
       {nextMilestone.timeframe && ` (${nextMilestone.timeframe})`}
      </p>
     )}
    </div>
   )}

   {/* Active Goals */}
   {activeGoals.length > 0 && (
    <div>
     <h3 className="font-semibold text-gray-900 mb-4">Active Goals</h3>
     <div className="grid gap-4 md:grid-cols-2">
      {activeGoals.map(goal => (
       <GoalCard key={goal.id} goal={goal} />
      ))}
     </div>
    </div>
   )}

   {/* Completed Goals */}
   {completedGoals.length > 0 && (
    <div>
     <h3 className="font-semibold text-gray-900 mb-4">Completed Goals ðŸŽ‰</h3>
     <div className="grid gap-4 md:grid-cols-2 opacity-75">
      {completedGoals.map(goal => (
       <GoalCard key={goal.id} goal={goal} />
      ))}
     </div>
    </div>
   )}

   {/* Add Goal Modal */}
   {showAddGoal && (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
     <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
      <h3 className="text-lg font-semibold mb-4">Add New Goal</h3>
      <p className="text-gray-600 mb-4">
       Goal creation coming soon! We're automatically generating smart goals based on your debt situation.
      </p>
      <Button onClick={() => setShowAddGoal(false)} variant="secondary">
       Close
      </Button>
     </div>
    </div>
   )}
  </div>
 );
};

export default GoalsTab;