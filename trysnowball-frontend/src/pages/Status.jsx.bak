/**
 * Status Page - Simple health check display for non-dev testers
 * Pings /auth/health and /ai/health, shows green/red status
 */

import React, { useState, useEffect } from 'react';
import { API_CONFIG } from '../config/api';

export default function Status() {
 const [status, setStatus] = useState({
  auth: { status: 'checking', message: 'Checking...', response_time: null },
  ai: { status: 'checking', message: 'Checking...', response_time: null },
  overall: 'checking'
 });

 useEffect(() => {
  checkServices();
 }, []);

 const checkServices = async () => {
  const results = {
   auth: await checkEndpoint(API_CONFIG.AUTH.HEALTH, 'Auth API'),
   ai: await checkEndpoint(API_CONFIG.AI.HEALTH, 'AI API'),
  };
  
  const overall = (results.auth.status === 'healthy' && results.ai.status === 'healthy') 
   ? 'healthy' 
   : 'unhealthy';
   
  setStatus({ ...results, overall });
 };

 const checkEndpoint = async (url, name) => {
  const startTime = Date.now();
  
  try {
   const response = await fetch(url, { 
    method: 'GET',
    headers: { 'Accept': 'application/json' },
    timeout: 5000 
   });
   
   const responseTime = Date.now() - startTime;
   
   if (!response.ok) {
    return {
     status: 'unhealthy',
     message: `${name} returned ${response.status}`,
     response_time: responseTime
    };
   }
   
   const contentType = response.headers.get('content-type');
   if (!contentType || !contentType.includes('application/json')) {
    return {
     status: 'unhealthy',
     message: `${name} returned non-JSON response`,
     response_time: responseTime
    };
   }
   
   const data = await response.json();
   
   if (!data.status || data.status !== 'ok') {
    return {
     status: 'unhealthy',
     message: `${name} reports unhealthy: ${JSON.stringify(data)}`,
     response_time: responseTime
    };
   }
   
   return {
    status: 'healthy',
    message: `${name} responding correctly`,
    response_time: responseTime,
    data: data
   };
   
  } catch (error) {
   return {
    status: 'unhealthy',
    message: `${name} error: ${error.message}`,
    response_time: Date.now() - startTime
   };
  }
 };

 const getStatusColor = (status) => {
  switch (status) {
   case 'healthy': return 'text-green-600';
   case 'unhealthy': return 'text-red-600';
   case 'checking': return 'text-yellow-600';
   default: return 'text-gray-600';
  }
 };

 const getStatusIcon = (status) => {
  switch (status) {
   case 'healthy': return '‚úÖ';
   case 'unhealthy': return '‚ùå';
   case 'checking': return 'üîÑ';
   default: return '‚ùì';
  }
 };

 return (
  <div className="min-h-screen bg-gray-50 py-8">
   <div className="max-w-4xl mx-auto px-4">
    <div className="bg-white rounded-lg shadow-md p-6">
     <h1 className="text-2xl font-bold text-gray-900 mb-6">
      TrySnowball System Status
     </h1>
     
     {/* Overall Status */}
     <div className="mb-8 p-4 rounded-lg border-2 border-dashed" 
        style={{ borderColor: status.overall === 'healthy' ? '#10b981' : '#ef4444' }}>
      <div className="flex items-center justify-between">
       <div className="flex items-center">
        <span className="text-2xl mr-3">{getStatusIcon(status.overall)}</span>
        <div>
         <h2 className={`text-xl font-semibold ${getStatusColor(status.overall)}`}>
          Overall Status: {status.overall.charAt(0).toUpperCase() + status.overall.slice(1)}
         </h2>
         <p className="text-gray-600 text-sm">
          {status.overall === 'healthy' 
           ? 'All systems operational' 
           : 'Some systems experiencing issues'}
         </p>
        </div>
       </div>
       <button 
        onClick={checkServices}
        className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
       >
        Refresh
       </button>
      </div>
     </div>

     {/* Individual Services */}
     <div className="space-y-4">
      {/* Auth Service */}
      <div className="border rounded-lg p-4">
       <div className="flex items-center justify-between mb-2">
        <div className="flex items-center">
         <span className="text-xl mr-3">{getStatusIcon(status.auth.status)}</span>
         <h3 className="text-lg font-semibold">Authentication Service</h3>
        </div>
        <div className="text-right">
         <span className={`font-medium ${getStatusColor(status.auth.status)}`}>
          {status.auth.status}
         </span>
         {status.auth.response_time && (
          <div className="text-sm text-gray-500">
           {status.auth.response_time}ms
          </div>
         )}
        </div>
       </div>
       <p className="text-gray-600 text-sm">{status.auth.message}</p>
       <p className="text-xs text-gray-400 mt-1">
        Endpoint: {API_CONFIG.AUTH.HEALTH}
       </p>
      </div>

      {/* AI Service */}
      <div className="border rounded-lg p-4">
       <div className="flex items-center justify-between mb-2">
        <div className="flex items-center">
         <span className="text-xl mr-3">{getStatusIcon(status.ai.status)}</span>
         <h3 className="text-lg font-semibold">AI Coach Service</h3>
        </div>
        <div className="text-right">
         <span className={`font-medium ${getStatusColor(status.ai.status)}`}>
          {status.ai.status}
         </span>
         {status.ai.response_time && (
          <div className="text-sm text-gray-500">
           {status.ai.response_time}ms
          </div>
         )}
        </div>
       </div>
       <p className="text-gray-600 text-sm">{status.ai.message}</p>
       <p className="text-xs text-gray-400 mt-1">
        Endpoint: {API_CONFIG.AI.HEALTH}
       </p>
       {status.ai.data?.services && (
        <div className="mt-2 text-xs text-gray-500">
         <div>OpenAI: {status.ai.data.services.openai ? '‚úÖ' : '‚ùå'}</div>
         <div>Rate Limiting: {status.ai.data.services.rateLimit ? '‚úÖ' : '‚ùå'}</div>
         {status.ai.data.services.quotas && (
          <div>Quotas: Free={status.ai.data.services.quotas.free}, Pro={status.ai.data.services.quotas.pro}</div>
         )}
        </div>
       )}
      </div>
     </div>

     {/* Footer Info */}
     <div className="mt-8 pt-6 border-t text-center text-sm text-gray-500">
      <p>Last updated: {new Date().toLocaleString()}</p>
      <p className="mt-1">
       This page automatically checks core API endpoints for JSON responses and proper status codes.
      </p>
     </div>
    </div>
   </div>
  </div>
 );
}