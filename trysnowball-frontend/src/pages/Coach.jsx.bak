import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext.tsx';
import { useUserDebts } from '../hooks/useUserDebts';
import { useEntitlement } from '../hooks/useEntitlement';
import { useAnalytics } from '../hooks/useAnalytics';
import { FLAGS } from '../config/flags';
import GPTCoachChat from '../components/ai/GPTCoachChat';
import YukiSleepFallback from '../components/ai/YukiSleepFallback';

const Coach = () => {
 const navigate = useNavigate();
 const location = useLocation();
 const { user, authReady } = useAuth();
 
 // Extract balance transfer context from navigation state
 const balanceTransferMode = location.state?.mode;
 const balanceTransferContext = location.state?.context;
 const { trackEvent } = useAnalytics();
 const { debts, paymentHistory, projections, totalDebt, totalMinPayments, extraPayment } = useUserDebts();
 const { canUsePremium, entitlement, loading: entitlementLoading } = useEntitlement();
 
 const [aiReport, setAiReport] = useState(null);
 const [reportCopied, setReportCopied] = useState(false);
 const [loading, setLoading] = useState(true);
 const [showFeedback, setShowFeedback] = useState(false);
 const [feedbackSubmitted, setFeedbackSubmitted] = useState(false);

 // Loading management
 useEffect(() => {
  setLoading(!authReady || entitlementLoading);
 }, [authReady, entitlementLoading]);

 // Generate AI Report
 const generateAIReport = () => {
  const currentDate = new Date().toISOString();
  const debtFreeMonths = projections?.totalMonths || 0;
  const debtFreeDate = debtFreeMonths > 0 
   ? new Date(Date.now() + debtFreeMonths * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
   : 'Not calculated';

  // Get recent payments (last 5)
  const recentPayments = paymentHistory
   .sort((a, b) => new Date(b.paymentDate || b.recordedAt) - new Date(a.paymentDate || a.recordedAt))
   .slice(0, 5)
   .map(payment => {
    const debt = debts.find(d => d.id === payment.debtId);
    return {
     date: payment.paymentDate || payment.recordedAt?.split('T')[0],
     debt_name: debt?.name || 'Unknown',
     amount: payment.amount,
     month: payment.month
    };
   });

  // Categorize debts
  const activeDebts = debts.filter(debt => debt.amount > 0);
  const clearedDebts = debts.filter(debt => debt.amount <= 0);

  const report = {
   generated_at: currentDate,
   user_id: user?.id || 'anonymous',
   
   // Debt Summary
   debt_summary: {
    total_active_debt: totalDebt,
    total_minimum_payments: totalMinPayments,
    extra_payment_budget: extraPayment,
    number_of_active_debts: activeDebts.length,
    number_of_cleared_debts: clearedDebts.length
   },

   // Active Debts
   active_debts: activeDebts.map((debt, index) => ({
    id: debt.id,
    name: debt.name,
    balance: debt.amount,
    interest_rate: debt.interest,
    minimum_payment: debt.regularPayment,
    snowball_order: index + 1
   })),

   // Cleared Debts
   cleared_debts: clearedDebts.map(debt => ({
    name: debt.name,
    original_balance: debt.originalAmount || debt.amount,
    date_cleared: debt.clearedDate || 'Unknown'
   })),

   // Recent Payment History
   recent_payments: recentPayments,

   // Snowball Projection
   snowball_projection: {
    estimated_payoff_months: debtFreeMonths,
    estimated_payoff_years: Math.floor(debtFreeMonths / 12),
    debt_free_date: debtFreeDate,
    current_strategy: 'Snowball Method (smallest balance first)',
    total_interest_projection: projections?.totalInterest || 0
   },

   // Natural Language Summary
   summary: generateNaturalLanguageSummary(activeDebts, totalDebt, debtFreeMonths, recentPayments)
  };

  return report;
 };

 const generateNaturalLanguageSummary = (activeDebts, totalDebt, debtFreeMonths, recentPayments) => {
  const debtCount = activeDebts.length;
  const hasRecentPayments = recentPayments.length > 0;
  const timeframe = debtFreeMonths > 0 
   ? debtFreeMonths > 12 
    ? `${Math.floor(debtFreeMonths / 12)} years and ${debtFreeMonths % 12} months`
    : `${debtFreeMonths} months`
   : 'not calculated';

  let summary = `You currently have ¬£${totalDebt.toLocaleString()} in debt across ${debtCount} active accounts. `;
  
  if (debtFreeMonths > 0) {
   summary += `Using the snowball method with your current payment plan, you're projected to be debt-free in ${timeframe}. `;
  }
  
  if (hasRecentPayments) {
   const totalRecentPayments = recentPayments.reduce((sum, p) => sum + p.amount, 0);
   summary += `You've made ¬£${totalRecentPayments.toLocaleString()} in payments recently, showing good progress. `;
  }

  if (activeDebts.length > 0) {
   const smallestDebt = activeDebts.reduce((min, debt) => debt.amount < min.amount ? debt : min);
   summary += `Your next target should be the ${smallestDebt.name} with a balance of ¬£${smallestDebt.amount.toLocaleString()}.`;
  }

  return summary;
 };

 const copyAIReport = async () => {
  const report = generateAIReport();
  setAiReport(report);
  
  const reportText = `TRYSNOWBALL AI REPORT - ${new Date().toLocaleDateString()}

DEBT SUMMARY:
- Total Active Debt: ¬£${report.debt_summary.total_active_debt.toLocaleString()}
- Monthly Minimums: ¬£${report.debt_summary.total_minimum_payments.toLocaleString()}
- Extra Payment Budget: ¬£${report.debt_summary.extra_payment_budget.toLocaleString()}
- Active Debts: ${report.debt_summary.number_of_active_debts}
- Cleared Debts: ${report.debt_summary.number_of_cleared_debts}

ACTIVE DEBTS (Snowball Order):
${report.active_debts.map(debt => 
 `${debt.snowball_order}. ${debt.name}: ¬£${debt.amount_pennies.toLocaleString()} (${debt.interest_rate}% APR, ¬£${debt.minimum_payment}/month)`
).join('\n')}

RECENT PAYMENT HISTORY:
${report.recent_payments.map(payment => 
 `- ${payment.date}: ¬£${payment.amount.toLocaleString()} to ${payment.debt_name}`
).join('\n')}

SNOWBALL PROJECTION:
- Debt-Free Date: ${report.snowball_projection.debt_free_date}
- Time to Freedom: ${report.snowball_projection.estimated_payoff_months} months
- Strategy: ${report.snowball_projection.current_strategy}

SUMMARY:
${report.summary}

---
This report was generated by TrySnowball (https://trysnowball.com) on ${new Date().toLocaleString()}.
Please use this information to provide personalized debt advice and coaching.`;

  try {
   await navigator.clipboard.writeText(reportText);
   setReportCopied(true);
   setTimeout(() => setReportCopied(false), 3000);
  } catch (err) {
   console.error('Failed to copy report:', err);
   // Fallback for older browsers
   const textArea = document.createElement('textarea');
   textArea.value = reportText;
   document.body.appendChild(textArea);
   textArea.select();
   document.execCommand('copy');
   document.body.removeChild(textArea);
   setReportCopied(true);
   setTimeout(() => setReportCopied(false), 3000);
  }
 };


 // Track page visit
 useEffect(() => {
  if (user && window.gtag) {
   window.gtag('event', 'ai_coach_page_visit', {
    user_id: user?.id,
    debt_count: debts.length,
    total_debt: totalDebt,
    is_pro: canUsePremium,
    daily_quota: entitlement.dailyQuota
   });
  }
 }, [user, debts.length, totalDebt, canUsePremium, entitlement.dailyQuota]);

 // Loading state
 if (!authReady || loading) {
  return (
   <div className={`min-h-screen ${colors.background} flex items-center justify-center`}>
    <div className="text-center">
     <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
     <p className={colors.text.secondary}>Loading AI Coach...</p>
    </div>
   </div>
  );
 }

 // Not logged in
 if (!user) {
  return (
   <div className={`min-h-screen ${colors.background} px-6 py-12`}>
    <div className="max-w-2xl mx-auto text-center">
     <div className="text-6xl mb-8">üêà‚Äç‚¨õ</div>
     <h1 className="text-4xl font-bold mb-4">Meet Yuki ‚Äî your AI debt coach</h1>
     <p className="text-xl mb-8 text-gray-600">
      In Japanese, "Yuki" („ÇÜ„Åç / „É¶„Ç≠) can mean "snow" (Èõ™) or "happiness" (Âπ∏). Get smart coaching with AI that understands UK debt and provides personalized guidance for your debt-free journey.
     </p>
     
     <div className={`${colors.surface} rounded-lg p-8 shadow-lg border ${colors.border}`}>
      <div className="mb-6">
       <h3 className="text-xl font-semibold mb-3">Login Required</h3>
       <p className="text-gray-600 mb-6">
        Login to get personalized coaching based on your actual debt data.
       </p>
      </div>
      
      <div className="space-y-4">
       <button
        onClick={() => navigate('/auth/login')}
        className="w-full px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
       >
        Login
       </button>
       <button
        onClick={() => navigate('/')}
        className="w-full px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium"
       >
        Back to Home
       </button>
      </div>
     </div>
    </div>
   </div>
  );
 }

 // Pro gating is now handled server-side via quota enforcement
 // The AI Chat component will handle quota exceeded (402) responses
 // and show upgrade prompts when needed

 // Check if Yuki (AI) is disabled - show sleep mode fallback
 if (!FLAGS.YUKI_ENABLED) {
  return (
   <div className={`min-h-screen ${colors.background}`}>
    <div className="max-w-6xl mx-auto py-8 px-4">
     {/* Header */}
     <div className={`${colors.surface} rounded-lg p-6 border ${colors.border} text-center mb-8`}>
      <h1 className="text-2xl font-semibold mb-4">üêà‚Äç‚¨õ AI Debt Coach</h1>
      <p className={`${colors.text.secondary} max-w-2xl mx-auto`}>
       Your personal AI coach for debt-free living
      </p>
     </div>

     {/* Yuki Sleep Mode Fallback */}
     <YukiSleepFallback />

     {/* Quick Actions (still available when AI is off) */}
     <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-8">
      <button
       onClick={() => navigate('/debts')}
       className={`p-4 border ${colors.border} rounded-lg hover:${colors.surfaceSecondary} transition-colors text-center`}
      >
       <div className="text-2xl mb-2">üìä</div>
       <div className={`font-medium ${colors.text.primary}`}>Update My Debts</div>
      </button>
      <button
       onClick={() => navigate('/my-plan')}
       className={`p-4 border ${colors.border} rounded-lg hover:${colors.surfaceSecondary} transition-colors text-center`}
      >
       <div className="text-2xl mb-2">üìà</div>
       <div className={`font-medium ${colors.text.primary}`}>View Plan</div>
      </button>
     </div>
    </div>
   </div>
  );
 }

 if (!FLAGS.YUKI_ENABLED) {
  trackEvent('ai_sleep_mode_shown');
  return <YukiSleepFallback />;
 }

 // Main Coach Interface
 return (
  <div className={`min-h-screen ${colors.background}`}>
   <div className="max-w-6xl mx-auto py-8 px-4">
    {/* Header */}
    

    {/* Live Chat Interface */}
    <div className="space-y-8">
     {/* Welcome Message */}
     <div className={`${colors.surface} rounded-lg p-6 border ${colors.border} text-center`}>
      
      <h2 className="text-2xl font-semibold mb-4">üêà‚Äç‚¨õ Meet Yuki ‚Äî your AI debt coach</h2>
      <p className={`${colors.text.secondary} mb-4 max-w-2xl mx-auto`}>
       In Japanese, "Yuki" („ÇÜ„Åç / „É¶„Ç≠) can mean "snow" (Èõ™) or "happiness" (Âπ∏). Get personalized coaching based on your debt situation ‚Äî from first steps to celebrating debt freedom!
      </p>
     </div>

     {/* Live GPT Chat */}
     <div className={`${colors.surface} rounded-lg border ${colors.border} overflow-hidden`}>
      <GPTCoachChat 
       className="h-[600px]" 
       dailyQuota={entitlement.dailyQuota}
       hasPremium={canUsePremium}
       mode={balanceTransferMode || 'general'}
       context={balanceTransferContext}
       onTimelineRequest={() => {
        // Track timeline request from AI Coach
        trackEvent?.('balance_transfer_timeline_request', {
         source: 'ai_coach',
         mode: balanceTransferMode || 'general'
        });
        navigate('/my-plan?balance_transfer=true');
       }}
      />
     </div>

     {/* Quick Actions */}
     <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      <button
       onClick={() => navigate('/debts')}
       className={`p-4 border ${colors.border} rounded-lg hover:${colors.surfaceSecondary} transition-colors text-center`}
      >
       <div className="text-2xl mb-2">üìä</div>
       <div className={`font-medium ${colors.text.primary}`}>Update My Debts</div>
      </button>
      <button
       onClick={() => navigate('/my-plan')}
       className={`p-4 border ${colors.border} rounded-lg hover:${colors.surfaceSecondary} transition-colors text-center`}
      >
       <div className="text-2xl mb-2">üìà</div>
       <div className={`font-medium ${colors.text.primary}`}>View Plan</div>
      </button>
     </div>
    </div>

    {/* Feedback Section */}
    <div className={`${colors.surface} rounded-lg p-6 border ${colors.border}`}>
     <div className="text-center">
      <h3 className="text-lg font-semibold mb-4">How was your session?</h3>
      {!feedbackSubmitted ? (
       <div className="space-x-4">
        <button
         onClick={() => {
          setFeedbackSubmitted(true);
          if (window.gtag) {
           window.gtag('event', 'ai_coach_feedback', {
            user_id: user?.id,
            feedback: 'positive',
            page: 'coach'
           });
          }
         }}
         className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
        >
         üëç Very helpful!
        </button>
        <button
         onClick={() => setShowFeedback(true)}
         className="px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
        >
         üëé Could be better
        </button>
       </div>
      ) : (
       <p className="text-green-600 font-medium">Thanks for your feedback! üôè</p>
      )}
     </div>
    </div>

    {/* Feedback Modal */}
    {showFeedback && (
     <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className={`${colors.surface} rounded-lg p-6 max-w-md mx-4`}>
       <h3 className="text-lg font-semibold mb-4">Help us improve</h3>
       <p className="text-gray-600 mb-4">
        What would make the AI Coach more helpful for you?
       </p>
       <textarea
        className="w-full p-3 border border-gray-300 rounded-lg mb-4"
        rows="4"
        placeholder="Your feedback..."
       />
       <div className="flex space-x-3">
        <button
         onClick={() => {
          setShowFeedback(false);
          setFeedbackSubmitted(true);
          if (window.gtag) {
           window.gtag('event', 'ai_coach_feedback', {
            user_id: user?.id,
            feedback: 'negative_with_comments',
            page: 'coach'
           });
          }
         }}
         className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
         Submit Feedback
        </button>
        <button
         onClick={() => setShowFeedback(false)}
         className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
        >
         Cancel
        </button>
       </div>
      </div>
     </div>
    )}
   </div>
  </div>
 );
};

export default Coach;