// src/App.js
import React, { useState, useEffect } from 'react';
import { Routes, Route, Link, useLocation, Navigate, useParams } from 'react-router-dom';

import { initPostHog } from './lib/posthog';
import { initWebVitals } from './reportWebVitals';
import './env';
import './utils/testPostHog';
import './utils/envDebug';

import { UserFlowProvider } from './contexts/UserFlowContext';
import { useDemoMode } from './providers/DemoModeProvider';

import StepperNavigation from './components/StepperNavigation';
import Button from './components/ui/Button';
import { Menu, X } from 'lucide-react';

// Zombie session components
import ZombieSessionAlert from './components/ZombieSessionAlert';
import TokenExpiryModal from './components/TokenExpiryModal';

// Token refresh hook
import { useTokenRefresh } from './hooks/useTokenRefresh';

// Feature flags
import { FEATURE } from './lib/featureFlags';
import { FLAGS } from './config/flags';

// Auth gate component
import AuthGate from './components/AuthGate';

// Maintenance mode
import MaintenanceMode from './components/MaintenanceMode';
import useMaintenanceMode from './hooks/useMaintenanceMode';

// Pages
import RootRoute from './components/RootRoute';
import PlanIndexRedirect from './components/PlanIndexRedirect';
import Plan from './pages/Plan';
import MyPlan from './pages/MyPlan/index';
import ChartLibraryDemo from './pages/ChartLibraryDemo';
// Removed CleanDebtsPage - using unified system now
import NotFound from './pages/NotFound';
import UpgradeSuccessToast from './components/UpgradeSuccessToast';
import SyncRestoredToast from './components/SyncRestoredToast';
import ZombieSessionManager from './components/ZombieSessionManager.tsx';
import OfflineBanner from './components/OfflineBanner';
import { AuthProvider, useAuth } from './contexts/AuthContext.tsx';
import { SettingsProvider } from './contexts/SettingsContext.tsx';
import { useUserDebts } from './hooks/useUserDebts';
import AuthDebugPanel from './components/AuthDebugPanel';
import AuthDebugBanner from './components/AuthDebugBanner';
import DemoChrome from './components/DemoChrome';
import FirstTimeOnboarding from './components/FirstTimeOnboarding';
import VersionInfo from './components/VersionInfo';
import { AppErrorBoundary } from './components/AppErrorBoundary';
import PageSkeleton from './components/PageSkeleton';
import Status from './pages/Status';
import UserDataMigration from './components/UserDataMigration';
import TrialStatusBanner from './components/TrialStatusBanner';


// Development test pages
const LocalTest = React.lazy(() => import('./pages/LocalTest'));
const ShareCardTest = React.lazy(() => import('./pages/ShareCardTest'));
const StyleGuide = React.lazy(() => import('./pages/StyleGuide'));

// Lazy pages
const Landing = React.lazy(() => import('./pages/Landing'));
const LoginMagic = React.lazy(() => import('./pages/LoginMagic'));
const LoginSuccess = React.lazy(() => import('./pages/LoginSuccess'));
const SignupConfirmation = React.lazy(() => import('./pages/SignupConfirmation'));
const DemoEnter = React.lazy(() => import('./pages/DemoEnter'));
const MoneyMakeoverArticle = React.lazy(() => import('./pages/MoneyMakeoverArticle'));
const Article = React.lazy(() => import('./pages/Article'));
const Coach = React.lazy(() => import('./pages/Coach'));
const Security = React.lazy(() => import('./pages/Security'));
const HowItWorks = React.lazy(() => import('./pages/HowItWorks'));
const LibraryLayout = React.lazy(() => import('./pages/library/LibraryLayout'));
const LibraryIndexPage = React.lazy(() => import('./pages/library'));
const DebtSnowballVsAvalanche = React.lazy(() => import('./pages/library/DebtSnowballVsAvalanche'));
const SmallDebtChallenge = React.lazy(() => import('./pages/library/SmallDebtChallenge'));
const AICoachLibrary = React.lazy(() => import('./pages/library/AICoach'));
const PayOff5000 = React.lazy(() => import('./pages/library/PayOff5000'));
const SpendReviewSnoop = React.lazy(() => import('./pages/library/SpendReviewSnoop'));
const FiveDebtMistakes = React.lazy(() => import('./pages/library/FiveDebtMistakes'));

// New library articles
const DebtSnowballPlan = React.lazy(() => import('./pages/library/DebtSnowballPlan'));
const DebtAvalanchePlan = React.lazy(() => import('./pages/library/DebtAvalanchePlan'));
const ImportHistoricalData = React.lazy(() => import('./compat/import/ImportHistoricalData'));
const CustomStrategyPlan = React.lazy(() => import('./pages/library/CustomStrategyPlan'));
const UpdateBalancesGuide = React.lazy(() => import('./pages/library/UpdateBalancesGuide'));
const PriorityDebtsUK = React.lazy(() => import('./pages/library/PriorityDebtsUK'));
const BreathingSpaceUK = React.lazy(() => import('./pages/library/BreathingSpaceUK'));
const HowToUpdateBalances = React.lazy(() => import('./pages/library/HowToUpdateBalances'));
const Upgrade = React.lazy(() => import('./pages/Upgrade'));
const Billing = React.lazy(() => import('./pages/Billing'));
const Settings = React.lazy(() => import('./pages/Settings'));
const Profile = React.lazy(() => import('./pages/Profile'));
const Onboarding = React.lazy(() => import('./pages/Onboarding'));
const Account = React.lazy(() => import('./pages/Account'));

// New smart onboarding system
const SmartOnboardingPage = React.lazy(() => import('./pages/SmartOnboardingPage'));
const ActionArticleView = React.lazy(() => import('./components/library/ActionArticleWrapper'));
const ArticlePage = React.lazy(() => import('./pages/ArticlePage'));

function ArticleRedirect() {
 const { slug } = useParams();
 return <Navigate to={`/library/${slug}`} replace />;
}


function Navigation() {
 const [isMenuOpen, setIsMenuOpen] = useState(false);
 const [trialBannerDismissed, setTrialBannerDismissed] = useState(false);
 const location = useLocation();
 const { user, authReady } = useAuth();
 const { debts } = useUserDebts();
 const hasDebtData = debts && debts.length > 0;
 const { enterDemo } = useDemoMode();

 const isFirstTimeUser = !localStorage.getItem('onboarding_completed');
 const shouldShowOnboarding = isFirstTimeUser && authReady && location.pathname === '/';
 
 // Demo route guard + query handling with kill switch
 useEffect(() => {
  if (!authReady) return;
  
  // Kill switch - disable demo mode entirely
  const demoDisabled = process.env.REACT_APP_DISABLE_DEMO === 'true';
  if (demoDisabled && location.pathname.startsWith('/demo')) {
   window.location.replace('/');
   return;
  }
  
  const url = new URL(window.location.href);
  const wantsDemo = url.searchParams.get('demo') === '1';
  const profile = url.searchParams.get('profile') || 'default';
  
  // Block demo for disabled state
  if (demoDisabled && wantsDemo) {
   return; // Ignore demo query param
  }
  
  // Handle ?demo=1 query parameter for non-authenticated users
  if (!user && wantsDemo && location.pathname !== '/demo') {
   enterDemo('query', profile);
   return;
  }
  
  // Handle /demo route for non-authenticated users
  if (!user && location.pathname.startsWith('/demo')) {
   enterDemo('route', profile);
   return;
  }
  
  // Redirect authenticated users away from demo routes
  if (user && location.pathname.startsWith('/demo')) {
   window.location.replace('/');
   return;
  }
 }, [location.pathname, location.search, user, authReady, enterDemo]);

 if (!authReady) {
  return (
   <div className="min-h-screen bg-gray-50 flex items-center justify-center">
    <div>Loading...</div>
   </div>
  );
 }

 if (shouldShowOnboarding) {
  return <FirstTimeOnboarding onComplete={() => (window.location.href = '/landing?onboarding=completed')} />;
 }

 const coreNavItems = [
  ['/', 'Home'],
  [FEATURE.newHomeIA ? '/plan' : '/my-plan', 'Plan'],
  ...(FLAGS.YUKI_ENABLED ? [['/ai/coach', 'Coach']] : []),
  ['/library', 'Get Started'],
  ['/account', 'Account'],
 ];
 

 return (
  <div className="min-h-screen bg-gradient-to-br from-primary via-accent to-primary">
   <AuthDebugBanner />
   <DemoChrome />
   
   {/* Trial Status Banner - shown after auth debug banner */}
   {user && (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-4">
     <TrialStatusBanner 
      onDismiss={() => setTrialBannerDismissed(true)}
      isDismissed={trialBannerDismissed}
     />
    </div>
   )}

   {/* DESKTOP NAV */}
   <nav className="bg-white/20 backdrop-blur-md shadow-lg border-b border-white/30 text-white sticky top-0 z-50 drop-shadow-lg">
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
     <div className="flex justify-between items-center h-16">
      {/* Left: Logo */}
      <Link to="/" className="flex items-center space-x-3 transition-colors">
       <img src="/logo-transparent.png" alt="Try Snowball logo" className="h-10 w-auto" />
       <span className="text-base font-semibold text-white">TrySnowball</span>
      </Link>

      {/* Desktop links */}
      <div className="hidden lg:flex items-center space-x-1">
       {coreNavItems.map(([path, label]) => {
        const active = location.pathname === path;
        return (
         <Link
          key={path}
          to={path}
          className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
           active
            ? 'bg-primary text-white shadow-sm transform scale-105'
            : 'text-white text-opacity-80 hover:text-white hover:bg-white hover:bg-opacity-10'
          }`}
         >
          {label}
         </Link>
        );
       })}

       <div className={`w-px h-6 mx-2 border-border`} />

       {/* Login/Signup */}
       {user ? (
        <Link to="/auth/login" className="px-3 py-2 text-sm text-white text-opacity-80 hover:text-white">
         Logout
        </Link>
       ) : (
        <>
         <Link to="/auth/login" className="px-3 py-2 text-sm text-white text-opacity-80 hover:text-white">
          Login
         </Link>
         <Button variant="primary" size="sm">
          Sign Up Free
         </Button>
        </>
       )}

       
      </div>

      {/* Mobile toggles */}
      <div className="lg:hidden flex items-center space-x-2">
       
       <button
        type="button"
        onClick={() => setIsMenuOpen(!isMenuOpen)}
        className={`text-muted hover:text-text p-2 rounded-lg`}
        aria-label="Toggle menu"
       >
        {isMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
       </button>
      </div>
     </div>

     {/* Mobile menu */}
     {isMenuOpen && (
      <div className={`lg:hidden pb-4`}>
       <div className="flex flex-col space-y-2 mt-2">
        {coreNavItems.map(([path, label]) => (
         <Link
          key={path}
          to={path}
          onClick={() => setIsMenuOpen(false)}
          className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
           location.pathname === path
            ? 'bg-primary text-white shadow-sm'
            : 'text-white text-opacity-80 hover:text-white hover:bg-white hover:bg-opacity-10'
          }`}
         >
          {label}
         </Link>
        ))}

        <div className={`h-px border-border`} />

        {user ? (
         <Link
          to="/auth/login"
          onClick={() => setIsMenuOpen(false)}
          className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 text-muted hover:text-text hover:bg-bg`}
         >
          Logout
         </Link>
        ) : (
         <>
          <Link
           to="/auth/login"
           onClick={() => setIsMenuOpen(false)}
           className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 text-muted hover:text-text hover:bg-bg`}
          >
           Login
          </Link>
          <Link
           to="/auth/login"
           onClick={() => setIsMenuOpen(false)}
           className="px-3 py-2 rounded-lg text-sm font-medium bg-primary text-white text-center"
          >
           Sign Up Free
          </Link>
         </>
        )}
       </div>
      </div>
     )}
    </div>
   </nav>

   <StepperNavigation hasDebtData={hasDebtData} />
   <UserDataMigration />
   <AuthDebugPanel />

   <div className="transition-all duration-300 ease-in-out min-h-screen" data-testid="app">
    <UpgradeSuccessToast />
    <Routes>
     {/* Landing & Auth Flow */}
     <Route path="/landing" element={<React.Suspense fallback={<PageSkeleton />}><Landing /></React.Suspense>} />
     <Route path="/onboarding" element={<React.Suspense fallback={<PageSkeleton />}><Onboarding /></React.Suspense>} />
     <Route path="/auth/signup-confirmation" element={<React.Suspense fallback={<PageSkeleton />}><SignupConfirmation /></React.Suspense>} />
     
     {/* Core */}
     <Route path="/" element={<RootRoute />} />
     <Route path="/waitlist" element={<Navigate to="/" replace />} />
     <Route path="/upgrade" element={<React.Suspense fallback={<PageSkeleton />}><Upgrade /></React.Suspense>} />
     <Route path="/settings" element={<React.Suspense fallback={<PageSkeleton />}><Settings /></React.Suspense>} />
     <Route path="/pricing" element={<Navigate to="/upgrade" replace />} />
     
     {/* New Plan route (with feature flag) */}
     {FEATURE.newHomeIA ? (
      <>
       <Route path="/plan" element={<PlanIndexRedirect />} />
       <Route path="/plan/*" element={<Plan />} />
       <Route path="/my-plan/*" element={<Navigate to="/plan" replace />} />
      </>
     ) : (
      <Route path="/my-plan/*" element={<MyPlan />} />
     )}

     {/* Debt Management - Redirect based on feature flag */}
     <Route path="/debts" element={<Navigate to={FEATURE.newHomeIA ? "/plan" : "/my-plan/debts"} replace />} />
     {/* Removed /clean-debts route - using unified system now */}
     {!FEATURE.newHomeIA && <Route path="/plan" element={<Navigate to="/my-plan" replace />} />}
     <Route path="/tools/debt-plan" element={<Navigate to={FEATURE.newHomeIA ? "/plan" : "/my-plan"} replace />} />
     <Route path="/what-if" element={<Navigate to={FEATURE.newHomeIA ? "/plan/forecast?scenario=true" : "/my-plan/forecast?scenario=true"} replace />} />

     {/* Smart Onboarding replaces old Actions page */}
     <Route path="/onboarding" element={<React.Suspense fallback={<PageSkeleton />}><SmartOnboardingPage /></React.Suspense>} />
     <Route path="/library" element={<React.Suspense fallback={<PageSkeleton />}><SmartOnboardingPage /></React.Suspense>} />
     <Route path="/library/:articleId" element={<React.Suspense fallback={<PageSkeleton />}><ActionArticleView /></React.Suspense>} />
     
     {/* New library articles */}
     {FLAGS.IMPORT_HISTORY_ENABLED && <Route path="/library/import-historical-data" element={<React.Suspense fallback={<PageSkeleton />}><ImportHistoricalData /></React.Suspense>} />}
     <Route path="/library/debt-snowball-plan" element={<React.Suspense fallback={<PageSkeleton />}><DebtSnowballPlan /></React.Suspense>} />
     <Route path="/library/debt-avalanche-plan" element={<React.Suspense fallback={<PageSkeleton />}><DebtAvalanchePlan /></React.Suspense>} />
     <Route path="/library/custom-strategy-plan" element={<React.Suspense fallback={<PageSkeleton />}><CustomStrategyPlan /></React.Suspense>} />
     <Route path="/library/update-balances-guide" element={<React.Suspense fallback={<PageSkeleton />}><UpdateBalancesGuide /></React.Suspense>} />
     <Route path="/library/priority-debts-uk" element={<React.Suspense fallback={<PageSkeleton />}><PriorityDebtsUK /></React.Suspense>} />
     <Route path="/library/breathing-space-uk" element={<React.Suspense fallback={<PageSkeleton />}><BreathingSpaceUK /></React.Suspense>} />
     <Route path="/library/how-to-update-balances" element={<React.Suspense fallback={<PageSkeleton />}><HowToUpdateBalances /></React.Suspense>} />
     <Route path="/library/debt-snowball-vs-avalanche" element={<React.Suspense fallback={<PageSkeleton />}><DebtSnowballVsAvalanche /></React.Suspense>} />
     <Route path="/library/small-debt-challenge" element={<React.Suspense fallback={<PageSkeleton />}><SmallDebtChallenge /></React.Suspense>} />
     <Route path="/library/five-debt-mistakes" element={<React.Suspense fallback={<PageSkeleton />}><FiveDebtMistakes /></React.Suspense>} />
     
     {/* Legacy markdown-based articles */}
     <Route path="/library/strategies-snowball-vs-avalanche" element={<React.Suspense fallback={<PageSkeleton />}><ArticlePage /></React.Suspense>} />
     <Route path="/library/custom-strategy-how-to" element={<React.Suspense fallback={<PageSkeleton />}><ArticlePage /></React.Suspense>} />

     {/* Legacy library (nested) - kept for backwards compatibility */}
     <Route path="/library-old" element={<React.Suspense fallback={<PageSkeleton />}><LibraryLayout /></React.Suspense>}>
      <Route index element={<React.Suspense fallback={<PageSkeleton />}><LibraryIndexPage /></React.Suspense>} />
      <Route path="debt-snowball-vs-avalanche" element={<React.Suspense fallback={<PageSkeleton />}><DebtSnowballVsAvalanche /></React.Suspense>} />
      <Route path="small-debt-challenge" element={<React.Suspense fallback={<PageSkeleton />}><SmallDebtChallenge /></React.Suspense>} />
      <Route path="ai-coach" element={<React.Suspense fallback={<PageSkeleton />}><AICoachLibrary /></React.Suspense>} />
      <Route path="pay-off-5000-fast" element={<React.Suspense fallback={<PageSkeleton />}><PayOff5000 /></React.Suspense>} />
      <Route path="spend-review-snoop" element={<React.Suspense fallback={<PageSkeleton />}><SpendReviewSnoop /></React.Suspense>} />
      <Route path="five-debt-mistakes" element={<React.Suspense fallback={<PageSkeleton />}><FiveDebtMistakes /></React.Suspense>} />
     </Route>

     {/* Legacy library routes */}
     <Route path="/library/money-makeover" element={<React.Suspense fallback={<PageSkeleton />}><MoneyMakeoverArticle /></React.Suspense>} />
     <Route path="/library/:slug" element={<React.Suspense fallback={<PageSkeleton />}><Article /></React.Suspense>} />
     <Route path="/how-it-works" element={<React.Suspense fallback={<PageSkeleton />}><HowItWorks /></React.Suspense>} />
     <Route path="/security" element={<React.Suspense fallback={<PageSkeleton />}><Security /></React.Suspense>} />
     <Route path="/privacy" element={<React.Suspense fallback={<PageSkeleton />}><Security /></React.Suspense>} />

     {/* Auth */}
     <Route path="/auth/login" element={<React.Suspense fallback={<PageSkeleton />}><LoginMagic /></React.Suspense>} />
     <Route path="/login-success" element={<React.Suspense fallback={<PageSkeleton />}><LoginSuccess /></React.Suspense>} />

     {/* AI Coach */}
     {FLAGS.YUKI_ENABLED && <Route path="/ai/coach" element={<React.Suspense fallback={<PageSkeleton />}><Coach /></React.Suspense>} />}

     {/* Account */}
     <Route path="/account" element={<React.Suspense fallback={<PageSkeleton />}><Account /></React.Suspense>} />
     <Route path="/account/upgrade" element={<React.Suspense fallback={<PageSkeleton />}><Upgrade /></React.Suspense>} />
     <Route path="/account/export" element={<React.Suspense fallback={<PageSkeleton />}><Profile /></React.Suspense>} />
     <Route path="/profile" element={<React.Suspense fallback={<PageSkeleton />}><Profile /></React.Suspense>} />
     <Route path="/billing" element={<React.Suspense fallback={<PageSkeleton />}><Billing /></React.Suspense>} />

     {/* Demo mode - with kill switch */}
     {process.env.REACT_APP_DISABLE_DEMO !== 'true' && (
      <Route path="/demo" element={<React.Suspense fallback={<PageSkeleton />}><DemoEnter /></React.Suspense>} />
     )}
     
     {/* Status & redirects */}
     <Route path="/status" element={<Status />} />
     
     {/* Development test pages */}
     <Route path="/dev/charts" element={<ChartLibraryDemo />} />
     <Route path="/dev/local-test" element={<React.Suspense fallback={<PageSkeleton />}><LocalTest /></React.Suspense>} />
     <Route path="/dev/share-card-test" element={<React.Suspense fallback={<PageSkeleton />}><ShareCardTest /></React.Suspense>} />
     <Route path="/styleguide" element={<React.Suspense fallback={<PageSkeleton />}><StyleGuide /></React.Suspense>} />
     <Route path="/ref/:referralId" element={<Navigate to="/" replace />} />
     <Route path="/money-makeover" element={<Navigate to="/library/money-makeover" replace />} />
     {FLAGS.YUKI_ENABLED && <Route path="/ai-coach" element={<Navigate to="/ai/coach" replace />} />}
     {FLAGS.YUKI_ENABLED && <Route path="/coach" element={<Navigate to="/ai/coach" replace />} />}
     {FLAGS.YUKI_ENABLED && <Route path="/ai-report" element={<Navigate to="/ai/coach" replace />} />}
     <Route path="/article/:slug" element={<ArticleRedirect />} />
     <Route path="/what-if" element={<Navigate to="/my-plan?tab=timeline&scenario=true" replace />} />
     <Route path="/login" element={<Navigate to="/auth/login" replace />} />
     <Route path="/login/success" element={<Navigate to="/login-success" replace />} />
     <Route path="/auth/success" element={<React.Suspense fallback={<PageSkeleton />}><LoginSuccess /></React.Suspense>} />

     {/* 404 */}
     <Route path="*" element={<NotFound />} />
    </Routes>
   </div>

   {/* FOOTER */}
   <footer className={`bg-surface border-t border-border mt-auto`}>
    <div className="max-w-7xl mx-auto px-6 py-8">
     <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
      <div className="col-span-1">
       <div className="flex items-center space-x-3 mb-4">
        <img src="/logo-transparent.png" alt="Try Snowball logo" className="h-8 w-auto" />
        <span className={`text-lg font-semibold text-text`}>TrySnowball</span>
       </div>
       <p className={`text-sm text-muted max-w-sm`}>
        Beat debt faster with personalized coaching and smart payoff strategies.
       </p>
      </div>
      <div className="col-span-1">
       <h3 className={`text-sm font-semibold text-text mb-4`}>Quick Links</h3>
       <ul className="space-y-2">
        <li><Link to="/debts" className={`text-sm text-muted hover:text-text`}>Track Debts</Link></li>
        <li><Link to="/library" className={`text-sm text-muted hover:text-text`}>Actions</Link></li>
       </ul>
      </div>
      <div className="col-span-1">
       <h3 className={`text-sm font-semibold text-text mb-4`}>Support</h3>
       <ul className="space-y-2 mb-4">
        <li><Link to="/security" className={`text-sm text-muted hover:text-text`}>Security</Link></li>
        <li><Link to="/how-it-works" className={`text-sm text-muted hover:text-text`}>How It Works</Link></li>
       </ul>
       <div className="space-y-2">
        <a href="mailto:hello@trysnowball.co.uk" className={`text-sm text-muted hover:text-text flex items-center space-x-2`}>
         <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
          <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
         </svg>
         <span>hello@trysnowball.co.uk</span>
        </a>
        <p className={`text-xs text-muted`}>Questions? Feedback? We'd love to hear from you!</p>
       </div>
      </div>
     </div>
     <div className={`border-t border-border pt-6 mt-6 flex flex-col sm:flex-row justify-between items-center`}>
      <div className="flex items-center space-x-4">
       <p className={`text-xs text-muted`}>© {new Date().getFullYear()} TrySnowball.</p>
       <VersionInfo />
      </div>
      <div className="flex space-x-4 mt-4 sm:mt-0">
       <span className={`text-xs text-muted`}>Made with ❤️ for debt freedom</span>
      </div>
     </div>
    </div>
   </footer>
  </div>
 );
}

function App() {
 console.log('🚀 App component rendering');
 const [showSyncRestoredToast, setShowSyncRestoredToast] = useState(false);
 const { isMaintenanceMode } = useMaintenanceMode();
 
 // Initialize token refresh system
 const tokenRefresh = useTokenRefresh();
 
 // Listen for sync restored event
 useEffect(() => {
  const handleSyncRestored = () => {
   setShowSyncRestoredToast(true);
  };
  
  window.addEventListener('sync-restored', handleSyncRestored);
  return () => window.removeEventListener('sync-restored', handleSyncRestored);
 }, []);
 
 useEffect(() => {
  console.log('🗺️ App routing - pathname:', window.location.pathname);
  initPostHog();
  initWebVitals();
  if (process.env.NODE_ENV === 'development') {
   import('./utils/securityDevTools').catch(() => {});
  }
 }, []);

 // Show maintenance mode if enabled (check after PostHog loads)
 if (isMaintenanceMode) {
  return <MaintenanceMode />;
 }

 return (
  <AppErrorBoundary>
    <UserFlowProvider>
     <AuthProvider>
      <SettingsProvider>
      {/* No Router here — index.js owns BrowserRouter */}
      <OfflineBanner />
      <AuthGate fallback={
       <div className="min-h-screen bg-bg flex items-center justify-center">
        <div>Loading…</div>
       </div>
      }>
       <Navigation />
       {showSyncRestoredToast && (
        <SyncRestoredToast onClose={() => setShowSyncRestoredToast(false)} />
       )}
       <ZombieSessionAlert />
       <TokenExpiryModal />
       <ZombieSessionManager />
      </AuthGate>
      </SettingsProvider>
     </AuthProvider>
    </UserFlowProvider>
  </AppErrorBoundary>
 );
}

export default App;