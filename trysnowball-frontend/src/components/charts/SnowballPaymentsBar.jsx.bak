import { ResponsiveBar } from "@nivo/bar";

export default function SnowballPaymentsBar({
 data,
 height = 340,
 viewMode = "absolute"
}) {
 const fmtGBP = (v) => `Â£${Math.round(v).toLocaleString("en-GB")}`;
 const fmtPercent = (v) => `${v}%`;
 const formatter = viewMode === "absolute" ? fmtGBP : fmtPercent;
 
 const safe = Array.isArray(data)
  ? data.map((r, i) => ({
    month: r.month ?? i + 1,
    "Interest": Math.max(0, Number(r["Interest"]) || 0),
    "Minimum Principal": Math.max(0, Number(r["Minimum Principal"]) || 0),
    "Snowball Extra": Math.max(0, Number(r["Snowball Extra"]) || 0),
   }))
  : [];

 return (
  <div style={{ height }}>
   <ResponsiveBar
    data={safe}
    keys={["Interest", "Minimum Principal", "Snowball Extra"]}
    indexBy="month"
    margin={{ top: 20, right: 24, bottom: 48, left: 72 }}
    padding={0.24}
    groupMode="stacked"
    colors={["#f59e0b", "#64748b", "#10b981"]} // interest / min principal / extra
    borderRadius={2}
    axisBottom={{
     tickSize: 0,
     tickPadding: 8,
     legend: "Months",
     legendOffset: 36,
     legendPosition: "middle",
    }}
    axisLeft={{
     tickSize: 0,
     tickPadding: 8,
     format: formatter,
    }}
    enableLabel={false}
    enableGridY={true}
    enableGridX={false}
    animate={true}
    motionConfig="gentle"
    tooltip={({ id, value, indexValue }) => (
     <div style={{ padding: 8 }}>
      <div style={{ fontWeight: 700 }}>Month {String(indexValue)}</div>
      <div>{String(id)}: <strong>{formatter(Number(value) || 0)}</strong></div>
     </div>
    )}
    legends={[
     {
      anchor: "bottom",
      direction: "row",
      translateY: 40,
      itemWidth: 160,
      itemHeight: 16,
      symbolSize: 10,
     },
    ]}
   />
  </div>
 );
}