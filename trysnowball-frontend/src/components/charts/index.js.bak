// Chart Components - Unified exports for debt visualization
export { default as TrendChart } from './TrendChart';
export { default as SnowballChart } from './SnowballChart';
export { default as TimelineChart } from './TimelineChart';

// Chart utilities and helpers
export const formatCurrency = (value) => {
 if (typeof value !== 'number' || isNaN(value)) return '£0';
 return '£' + Math.round(value).toLocaleString();
};

export const simulateSnowball = (debts, totalPayment) => {
 const snowballDebts = JSON.parse(JSON.stringify(debts)).sort((a, b) => a.balance - b.balance);
 
 for (let month = 1; month <= 120; month++) {
  let available = totalPayment;
  
  // Pay minimums first
  for (let i = 0; i < snowballDebts.length; i++) {
   const debt = snowballDebts[i];
   if (debt.amount_pennies <= 0) continue;
   const interest = debt.amount_pennies * (debt.rate / 12 / 100);
   const minPrincipal = Math.max(debt.min_payment_pennies - interest, 0);
   debt.amount_pennies = Math.max(0, debt.amount_pennies - minPrincipal);
   available -= debt.min_payment_pennies;
  }
  
  // Apply extra to smallest debt
  if (available > 0) {
   for (let i = 0; i < snowballDebts.length; i++) {
    const debt = snowballDebts[i];
    if (debt.amount_pennies > 0) {
     const payment = Math.min(available, debt.amount_pennies);
     debt.amount_pennies -= payment;
     break;
    }
   }
  }
  
  // Check if all debts are paid
  const totalRemaining = snowballDebts.reduce((sum, debt) => sum + debt.amount_pennies, 0);
  if (totalRemaining <= 1) return month;
 }
 
 return -1; // Not paid off within 120 months
};