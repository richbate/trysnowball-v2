import React, { useState, useCallback, useMemo, useEffect } from 'react';
import { ChevronRight, Edit2, Trash2, Check, X, GripVertical, History, Snowflake } from 'lucide-react';
import { formatDebtBalance, formatMinPayment, formatAPR } from '../../utils/debtNormalize';
import PaymentHistoryList from '../payments/PaymentHistoryList';
import { fromCents } from '../../lib/money';

const DebtTableRow = ({ 
 debt, 
 index, 
 onEdit, 
 onDelete, 
 onBalanceUpdate, 
 onViewHistory,
 onRecordPayment,
 isExpanded, 
 onToggleExpand,
 onDragStart,
 onDragEnd,
 onDragOver,
 onDragLeave,
 onDrop,
 isDragOver,
 isDragging
}) => {
 const [editingBalance, setEditingBalance] = useState(false);
 const [showPaymentHistory, setShowPaymentHistory] = useState(false);
 // Safe balance calculation - always a number
 const cents = Number.isFinite(debt.amount_pennies) ? debt.amount_pennies : 0;
 const currentBalance = fromCents(cents);
 const [balanceValue, setBalanceValue] = useState(String(currentBalance));

 // Update balanceValue when debt balance changes from parent
 useEffect(() => {
  const newBalance = String(currentBalance);
  if (!editingBalance && newBalance !== balanceValue) {
   setBalanceValue(newBalance);
  }
 }, [currentBalance, editingBalance, balanceValue]);

 // Memoized calculations
 const utilization = useMemo(() => {
  return debt.limit_gbp ? (currentBalance / debt.limit_gbp) * 100 : 0;
 }, [currentBalance, debt.limit_gbp]);


 const formattedAmount = useMemo(() => {
  return formatDebtBalance(debt);
 }, [debt]);

 const formattedPayment = useMemo(() => {
  return formatMinPayment(debt);
 }, [debt]);

 const formattedOriginalAmount = useMemo(() => {
  const amount = debt.originalAmount || currentBalance;
  return new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(amount);
 }, [debt.originalAmount, currentBalance]);

 const progressPercentage = useMemo(() => {
  const original = debt.originalAmount || currentBalance;
  if (original <= 0) return 0;
  return Math.max(0, (original - currentBalance) / original * 100);
 }, [debt.originalAmount, currentBalance]);

 const formattedLimit = useMemo(() => {
  return debt.limit_gbp ? new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(debt.limit_gbp) : null;
 }, [debt.limit_gbp]);

 // Stable handlers
 const handleBalanceSave = useCallback(() => {
  // Convert string back to number for saving
  const numericValue = parseFloat(balanceValue) || 0;
  console.log('DebtTableRow: Saving balance:', { 
   debtId: debt.id, 
   balanceValue, 
   numericValue, 
   onBalanceUpdate: typeof onBalanceUpdate 
  });
  if (onBalanceUpdate) {
   onBalanceUpdate(debt.id, numericValue);
  } else {
   console.error('DebtTableRow: onBalanceUpdate handler is missing');
  }
  setEditingBalance(false);
 }, [debt.id, balanceValue, onBalanceUpdate]);

 const handleBalanceCancel = useCallback(() => {
  setBalanceValue(String(currentBalance));
  setEditingBalance(false);
 }, [currentBalance]);

 const handleEditClick = useCallback(() => {
  onEdit(debt);
 }, [debt, onEdit]);

 const handleDeleteClick = useCallback(() => {
  onDelete(debt.id);
 }, [debt.id, onDelete]);

 const handleRowClick = useCallback(() => {
  onToggleExpand(debt.id);
 }, [debt.id, onToggleExpand]);

 const handleBalanceEditClick = useCallback(() => {
  setEditingBalance(true);
 }, []);

 const handleBalanceInputChange = useCallback((e) => {
  const value = e.target.value;
  // Allow numbers and decimal points only, keep as string for controlled input
  if (value === '' || /^\d*\.?\d*$/.test(value)) {
   setBalanceValue(value);
  }
 }, []);

 const handleDragStartLocal = useCallback((e) => {
  if (onDragStart) onDragStart(e, debt, index);
 }, [debt, index, onDragStart]);

 const handleDragOverLocal = useCallback((e) => {
  if (onDragOver) onDragOver(e, index);
 }, [index, onDragOver]);

 const handleDropLocal = useCallback((e) => {
  if (onDrop) onDrop(e, index);
 }, [index, onDrop]);

 return (
  <>
   <tr 
    className={`transition-all duration-200 cursor-pointer ${
     isDragging 
      ? 'opacity-50 bg-primary/10' 
      : isDragOver 
      ? 'bg-primary/20 border-t-2 border-primary' 
      : 'hover:bg-bg'
    }`}
    draggable={true}
    onDragStart={handleDragStartLocal}
    onDragEnd={onDragEnd || (() => {})}
    onDragOver={handleDragOverLocal}
    onDragLeave={onDragLeave || (() => {})}
    onDrop={handleDropLocal}
    onClick={handleRowClick}
   >
    <td className="px-8 py-5 whitespace-nowrap text-center" onClick={(e) => e.stopPropagation()}>
     <div className="flex items-center justify-center space-x-2">
      <GripVertical 
       className="h-5 w-5 text-muted hover:text-text cursor-grab active:cursor-grabbing" 
       title="Drag to reorder"
      />
      <div className="bg-primary/10 text-primary text-sm font-bold rounded-full w-8 h-8 flex items-center justify-center">
       {Math.min((debt.order_index || index + 1), 25)}
      </div>
     </div>
    </td>
    <td className="px-8 py-5 whitespace-nowrap">
     <div className="flex items-center">
      <div className="flex-shrink-0 w-5 h-5 mr-4">
       <ChevronRight 
        className={`transform transition-transform text-muted ${isExpanded ? 'rotate-90' : ''}`}
       />
      </div>
      <div>
       <div className="text-base font-semibold text-text">{debt.name}</div>
       {debt.isDemo && <div className="text-sm text-amber-600 font-medium">Demo Data</div>}
      </div>
     </div>
    </td>
    <td className="px-8 py-5 whitespace-nowrap text-right" onClick={(e) => e.stopPropagation()}>
     {editingBalance ? (
      <div className="flex items-center justify-end space-x-3">
       <input
        type="text"
        value={balanceValue || ''}
        onChange={handleBalanceInputChange}
        className="w-28 px-3 py-2 border border-border rounded-lg text-base text-right focus:outline-none focus:ring-2 focus:ring-primary bg-surface"
        placeholder="0.00"
        title="Enter debt balance"
        inputMode="decimal"
       />
       <button
        onClick={handleBalanceSave}
        className="text-success hover:text-success p-1"
        title="Save"
       >
        <Check className="h-5 w-5" />
       </button>
       <button
        onClick={handleBalanceCancel}
        className="text-danger hover:text-danger p-1"
        title="Cancel"
       >
        <X className="h-5 w-5" />
       </button>
      </div>
     ) : (
      <div 
       className="text-base font-semibold text-text cursor-pointer hover:text-primary hover:underline"
       onClick={handleBalanceEditClick}
       onKeyDown={(e) => e.key === 'Enter' && handleBalanceEditClick()}
       tabIndex={0}
       role="button"
       title="Click to edit balance"
      >
       {formattedAmount}
      </div>
     )}
    </td>
    <td className="px-8 py-5 whitespace-nowrap text-right text-base text-text">
     {formattedPayment}
    </td>
    <td className="px-8 py-5 whitespace-nowrap text-right">
     <div className="flex items-center justify-end">
      <div className="w-20 bg-bg rounded-full h-3 mr-3">
       <div 
        className="h-3 rounded-full bg-success"
        style={{ width: `${Math.min(progressPercentage, 100)}%` }}
       ></div>
      </div>
      <span className="text-sm font-medium text-muted">{progressPercentage.toFixed(0)}%</span>
      {debt.previousBalance && debt.previousBalance > currentBalance && (
       <div className="ml-2 text-xs text-success font-medium">
        ↓ £{new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(debt.previousBalance - currentBalance).replace('£', '')}
       </div>
      )}
     </div>
    </td>
    <td className="px-8 py-5 whitespace-nowrap text-center" onClick={(e) => e.stopPropagation()}>
     <div className="flex items-center justify-center space-x-2">
      {onViewHistory && (
       <button
        onClick={(e) => {
         e.stopPropagation();
         onViewHistory(debt);
        }}
        className="text-muted hover:text-text p-2 hover:bg-bg rounded-lg transition-colors"
        title="View payment history"
       >
        <History className="h-5 w-5" />
       </button>
      )}
      <button
       onClick={handleEditClick}
       className="text-muted hover:text-primary p-2 hover:bg-primary/10 rounded-lg transition-colors"
       title="Edit debt"
      >
       <Edit2 className="h-5 w-5" />
      </button>
      {onRecordPayment && (
       <button
        onClick={() => onRecordPayment(debt)}
        className="text-muted hover:text-success p-2 hover:bg-success/10 rounded-lg transition-colors"
        title="Record payment"
       >
        <Snowflake className="h-5 w-5" />
       </button>
      )}
      <button
       onClick={handleDeleteClick}
       className="text-muted hover:text-danger p-2 hover:bg-danger/10 rounded-lg transition-colors"
       title="Delete debt"
      >
       <Trash2 className="h-5 w-5" />
      </button>
     </div>
    </td>
   </tr>
   {isExpanded && (
    <tr>
     <td colSpan="6" className="px-8 py-6 bg-bg">
      <div className="grid grid-cols-2 md:grid-cols-5 gap-6 text-base">
       <div>
        <span className="font-semibold text-muted">Interest Rate:</span>
        <div className="text-text mt-1">
         {debt.apr_pct}%
        </div>
       </div>
       <div>
        <span className="font-semibold text-muted">Starting Balance:</span>
        <div className="text-text mt-1">{formattedOriginalAmount}</div>
       </div>
       {debt.limit_gbp && (
        <div>
         <span className="font-semibold text-muted">Credit Limit:</span>
         <div className="text-text mt-1">{formattedLimit}</div>
         <div className="text-xs text-muted mt-1">
          {utilization.toFixed(1)}% utilization
         </div>
        </div>
       )}
       <div>
        <span className="font-semibold text-muted">Type:</span>
        <div className="text-text mt-1">{debt.type || 'Credit Card'}</div>
       </div>
       {debt.previousBalance && (
        <div>
         <span className="font-semibold text-muted">Previous Balance:</span>
         <div className="text-text mt-1">{new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(debt.previousBalance)}</div>
         <div className="text-xs text-success font-medium mt-1">
          Paid down £{new Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(debt.previousBalance - currentBalance).replace('£', '')}
         </div>
        </div>
       )}
      </div>
      
      {/* Payment History */}
      <PaymentHistoryList
       debt={debt}
       isOpen={showPaymentHistory}
       onToggle={() => setShowPaymentHistory(!showPaymentHistory)}
      />
     </td>
    </tr>
   )}
  </>
 );
};

export default React.memo(DebtTableRow);