/**
 * Utility functions for debt data normalization
 */

/**
 * Normalizes various input formats to a Debt array
 * Handles arrays, objects, {items: []}, null, undefined, etc.
 * @param {any} input - The input to normalize
 * @returns {Array} Always returns an array of debts
 */
export function toDebtArray(input) {
 const list = Array.isArray(input) ? input
  : input?.items && Array.isArray(input.items) ? input.items
  : input?.debts && Array.isArray(input.debts) ? input.debts
  : input && typeof input === 'object' && !Array.isArray(input)
   ? ('balance' in input || 'amount' in input) ? [input] : Object.values(input)
  : [];

 return list.map(d => ({
  minPayment: 0,
  interestRate: 0,
  order: 0,
  ...d,
  // ensure array types
  paymentHistory: Array.isArray(d?.paymentHistory) ? d.paymentHistory : [],
 }));
}

/**
 * Safely extracts a numeric value from a debt property
 * @param {any} value - The value to convert
 * @returns {number} A valid number or 0
 */
export function safeNumber(value) {
 const num = Number(value);
 return isNaN(num) ? 0 : num;
}

const METRIC_DEFAULTS = {
 totalDebt: 0,
 totalMinPayments: 0,
 count: 0,
 byType: {},
};

/**
 * Normalizes metrics to ensure consistent shape
 * @param {any} m - The metrics object to normalize
 * @returns {Object} Normalized metrics with safe defaults
 */
export const normalizeMetrics = (m) => ({
 ...METRIC_DEFAULTS,
 ...(m || {}),
 totalDebt: +((m && m.totalDebt) ?? 0) || 0,
 totalMinPayments: +((m && m.totalMinPayments) ?? 0) || 0,
 count: +((m && m.count) ?? 0) || 0,
});