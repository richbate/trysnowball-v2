/**
 * Debt Journey States Utility
 * Determines user's position in their debt-free journey and provides appropriate messaging
 */
import { FEATURE } from '../lib/featureFlags';

/**
 * Calculate user's debt journey state
 * @param {Array} debts - Current debts array 
 * @param {Array} paymentHistory - Payment history array
 * @param {Object} projections - Debt payoff projections
 * @returns {Object} Journey state with type, headline, body, and CTA
 */
export const calculateDebtJourneyState = (debts = [], paymentHistory = [], projections = null) => {
 // Calculate basic metrics
 const activeDebts = debts.filter(debt => (debt.amount_pennies || 0) > 0);
 const hasDebts = activeDebts.length > 0;
 const hasEverHadDebt = debts.length > 0 || paymentHistory.length > 0;
 
 // Calculate progress percentage
 const totalOriginal = debts.reduce((sum, debt) => sum + (debt.originalAmount || debt.amount_pennies || 0), 0);
 const totalCurrent = activeDebts.reduce((sum, debt) => sum + (debt.amount_pennies || 0), 0);
 const totalPaidOff = totalOriginal - totalCurrent;
 const progress = totalOriginal > 0 ? (totalPaidOff / totalOriginal) : 0;
 
 // Current debt-free state
 const isCurrentlyDebtFree = !hasDebts;
 
 // Calculate remaining balance and timeline
 const balanceRemaining = totalCurrent;
 const projectedMonths = projections?.totalMonths || 0;
 const projectedDate = projectedMonths > 0 
  ? new Date(Date.now() + projectedMonths * 30 * 24 * 60 * 60 * 1000).toLocaleDateString('en-GB', { 
    month: 'long', 
    year: 'numeric' 
   })
  : null;

 // Determine state based on logic from requirements
 if (!hasDebts && !hasEverHadDebt) {
  // 1. No debts ever added
  return {
   type: 'start',
   headline: 'Let\'s start your debt-free journey 🚀',
   body: 'Add your first debt to see your personalised payoff plan.',
   cta: 'Add My First Debt',
   ctaAction: 'addDebt'
  };
 } else if (progress < 0.25) {
  // 2. Has debts, but still early in journey
  return {
   type: 'early',
   headline: 'You\'ve made a start — keep going 💪',
   body: 'Every payment moves you closer to debt freedom.\nTrack your balances each month to see your progress add up.',
   cta: 'Update Balances',
   ctaAction: 'updateBalances'
  };
 } else if (progress < 0.75) {
  // 3. Midway to goal
  const progressPercent = Math.round(progress * 100);
  return {
   type: 'mid',
   headline: 'You\'re making great progress 📈',
   body: `You've paid off ${progressPercent}% of your starting debt. Keep the momentum — you're on track to be debt-free by ${projectedDate || 'your target date'}.`,
   cta: 'See My Plan',
   ctaAction: 'viewPlan'
  };
 } else if (!isCurrentlyDebtFree) {
  // 4. Nearly debt-free
  const monthsRemaining = projectedMonths > 0 ? projectedMonths : 'a few';
  return {
   type: 'nearly',
   headline: 'You\'re nearly there 🎯',
   body: `Just £${balanceRemaining.toLocaleString()} left to go. That's less than ${monthsRemaining} months at your current pace.`,
   cta: 'Push to the Finish',
   ctaAction: 'pushFinish'
  };
 } else if (hasEverHadDebt) {
  // 5. True debt-free milestone
  return {
   type: 'debtFree',
   headline: 'You did it! You\'re debt-free 🎉',
   body: 'You\'ve paid off every single debt you were tracking.\nEnjoy this moment — and start planning what\'s next for your money.',
   cta: 'Celebrate & Share',
   ctaAction: 'celebrate'
  };
 } else {
  // 6. Already debt-free on signup
  return {
   type: 'alreadyFree',
   headline: 'Debt-free and starting fresh ✨',
   body: 'You don\'t have any debts to track — but you can still use TrySnowball to stay organised or plan future goals.',
   cta: 'Explore My Plan',
   ctaAction: 'explorePlan'
  };
 }
};

/**
 * Get navigation action for CTA button
 * @param {string} ctaAction - The action type
 * @param {function} navigate - React Router navigate function
 * @returns {function} Navigation handler
 */
export const getJourneyStateAction = (ctaAction, navigate) => {
 const planPath = FEATURE.newHomeIA ? '/plan' : '/my-plan';
 
 const actions = {
  addDebt: () => navigate('/debts'),
  updateBalances: () => navigate('/debts'),
  viewPlan: () => navigate(planPath),
  pushFinish: () => navigate(planPath),
  celebrate: () => navigate(`${planPath}?celebrate=true`),
  explorePlan: () => navigate(planPath)
 };
 
 return actions[ctaAction] || (() => navigate(planPath));
};

/**
 * Get appropriate emoji for journey state
 * @param {string} stateType - The journey state type
 * @returns {string} Appropriate emoji
 */
export const getJourneyStateEmoji = (stateType) => {
 const emojis = {
  start: '🚀',
  early: '💪',
  mid: '📈',
  nearly: '🎯',
  debtFree: '🎉',
  alreadyFree: '✨'
 };
 
 return emojis[stateType] || '💰';
};

export default {
 calculateDebtJourneyState,
 getJourneyStateAction,
 getJourneyStateEmoji
};