import React, { useMemo, useState } from "react";
import { localDebtManager } from "../storage/localDebtManager.ts";

/**
 * StorageDoctor
 * Dev-only panel to:
 * - Nuke legacy localStorage + IndexedDB
 * - Migrate legacy localStorage ‚Üí IndexedDB
 * - Seed fixed/random debts into IndexedDB
 * - Show an IndexedDB snapshot (stores, totals, debts table)
 */

// Legacy keys we observed in your app
const LEGACY_KEYS = [
 "trysnowball-user-data",
 "trysnowball-user-data-dev-user-123",
 "debtBalances",
 "trysnowball_demo_debts",
 "onboarding_completed",
 "onboarding_skipped",
 "trysnowball-analytics-events",
 // telemetry/theme/jwt
 "ph_phc_TiBCyhgzWEmeR7XdAFMpzAoqZXfeAvVDJwmqiP2Eo7X_posthog",
 "trysnowball-theme",
 "ts_jwt",
];

function readJSON(key) {
 try {
  const raw = localStorage.getItem(key);
  return raw ? JSON.parse(raw) : null;
 } catch {
  return null;
 }
}

function toMoney(n) {
 return Math.round((n ?? 0) * 100) / 100;
}
function detectPoundsFromLegacy(value) {
 // Heuristic: some legacy balances look like pence (e.g., 1200000 => ¬£12,000)
 if (typeof value !== "number") return 0;
 if (value >= 100000 && value % 100 === 0) return value / 100; // pence ‚Üí pounds
 return value; // otherwise already pounds
}

async function migrateLegacyToIndexedDB({ clearIndexFirst = true } = {}) {
 if (clearIndexFirst) await localDebtManager.clearAllData();

 // 1) debtBalances (array)
 const debtBalances = readJSON("debtBalances") || [];
 for (const d of debtBalances) {
  await localDebtManager.addDebt({
   name: d.name ?? "Debt",
   balance: toMoney(detectPoundsFromLegacy(d.balance)),
   interest: Number(d.interestRate ?? d.rate ?? d.interest ?? 0),
   minPayment: toMoney(detectPoundsFromLegacy(d.minPayment ?? d.minimum ?? 0)),
   order: Number(d.order ?? 1),
  });
 }

 // 2) trysnowball-user-data
 const userData = readJSON("trysnowball-user-data");
 if (userData?.debts?.length) {
  for (const d of userData.debts) {
   await localDebtManager.addDebt({
    name: d.name ?? "Debt",
    balance: toMoney(detectPoundsFromLegacy(d.balance)),
    interest: Number(d.interestRate ?? d.apr ?? 0),
    minPayment: toMoney(detectPoundsFromLegacy(d.minPayment)),
    order: Number(d.order ?? 1),
   });
  }
 }

 // 3) trysnowball-user-data-dev-user-123
 const userDataDev = readJSON("trysnowball-user-data-dev-user-123");
 if (userDataDev?.debts?.length) {
  for (const d of userDataDev.debts) {
   await localDebtManager.addDebt({
    name: d.name ?? "Debt",
    balance: toMoney(detectPoundsFromLegacy(d.balance)),
    interest: Number(d.interestRate ?? d.apr ?? 0),
    minPayment: toMoney(detectPoundsFromLegacy(d.minPayment)),
    order: Number(d.order ?? 1),
   });
  }
 }

 // 4) Demo debts (optional)
 const demo = readJSON("trysnowball_demo_debts") || [];
 for (const d of demo) {
  await localDebtManager.addDebt({
   name: d.name ?? "Demo Debt",
   balance: toMoney(detectPoundsFromLegacy(d.balance)),
   interest: Number(d.interestRate ?? 0),
   minPayment: toMoney(detectPoundsFromLegacy(d.minPayment)),
   order: Number(d.order ?? 1),
  });
 }
}

async function clearLegacyLocalStorage() {
 LEGACY_KEYS.forEach((k) => localStorage.removeItem(k));
}

// Simple seeders
async function seedFixed() {
 await localDebtManager.clearAllData();
 await localDebtManager.addDebt({ name: "Visa",     balance: 1200, interest: 19.9, minPayment: 35, order: 1 });
 await localDebtManager.addDebt({ name: "Car Loan",   balance: 6500, interest: 6.5, minPayment: 120, order: 2 });
 await localDebtManager.addDebt({ name: "Overdraft",  balance: 900, interest: 39.9, minPayment: 25, order: 3 });
 await localDebtManager.addDebt({ name: "Student Loan", balance: 3200, interest: 3.1, minPayment: 50, order: 4 });
}
function rand(min, max) { return Math.random() * (max - min) + min; }
function minFromBalance(balance) {
 const pct = balance * 0.015;
 return Math.max(15, Math.min(250, toMoney(pct)));
}
async function seedRandom(count = 5) {
 await localDebtManager.clearAllData();
 const NAMES = ["Visa","Mastercard","Amex","Store Card","Overdraft","Car Loan","Personal Loan","Student Loan"];
 const picks = [...NAMES].sort(() => 0.5 - Math.random()).slice(0, count);
 let order = 1;
 for (const name of picks) {
  const balance = toMoney(rand(300, 12000));
  const apr = toMoney(rand(2, 34));
  const min = minFromBalance(balance);
  await localDebtManager.addDebt({ name, balance, interest: apr, minPayment: min, order: order++ });
 }
}

// IndexedDB snapshot helper (no console needed)
function openAndDumpIDB(dbName = "trysnowball") {
 return new Promise((resolve, reject) => {
  const req = indexedDB.open(dbName);
  req.onerror = () => reject(req.error);
  req.onsuccess = () => {
   const db = req.result;
   const stores = Array.from(db.objectStoreNames);
   if (!stores.length) return resolve({});
   const tx = db.transaction(stores, "readonly");
   const out = {};
   let pending = stores.length;
   stores.forEach((name) => {
    const store = tx.objectStore(name);
    const getAll = store.getAll();
    getAll.onsuccess = () => {
     out[name] = getAll.result;
     if (--pending === 0) resolve(out);
    };
    getAll.onerror = () => reject(getAll.error);
   });
  };
 });
}

export default function StorageDoctor() {
 const [busy, setBusy] = useState(false);
 const [msg, setMsg] = useState("");
 const [idbSnapshot, setIdbSnapshot] = useState(null);
 const [showIdb, setShowIdb] = useState(false);

 const legacySnapshot = useMemo(() => {
  const snapshot = {};
  for (const k of LEGACY_KEYS) {
   const v = readJSON(k);
   if (v) snapshot[k] = v;
  }
  return snapshot;
 }, [busy]);

 const computeIdbTotals = (snap) => {
  const debts = snap?.debts ?? [];
  const payments = snap?.payments ?? [];
  const snapshots = snap?.snapshots ?? [];

  const totalCents = debts.reduce(
   (s, d) => s + (d.balance_cents ?? Math.round((d.balance ?? 0) * 100)),
   0
  );
  const minCents = debts.reduce(
   (s, d) => s + (d.min_payment_pennies ?? Math.round((d.minPayment ?? 0) * 100)),
   0
  );

  return {
   debtsCount: debts.length,
   paymentsCount: payments.length,
   snapshotsCount: snapshots.length,
   total: (totalCents / 100).toFixed(2),
   minTotal: (minCents / 100).toFixed(2),
   debtsTable: debts.map((d) => ({
    id: d.id,
    name: d.name,
    balance: ((d.balance_cents ?? Math.round((d.balance ?? 0) * 100)) / 100).toFixed(2),
    apr: d.apr != null ? (d.apr / 100).toFixed(2) : (d.interest ?? 0),
    min: ((d.min_payment_pennies ?? Math.round((d.minPayment ?? 0) * 100)) / 100).toFixed(2),
    order: d.order ?? d.order_index ?? "",
   })),
  };
 };

 const run = (fn) => async () => {
  try {
   setBusy(true);
   setMsg("");
   await fn();
   setMsg("‚úÖ Done.");
  } catch (e) {
   console.error(e);
   setMsg("‚ùå Failed. See console.");
  } finally {
   setBusy(false);
  }
 };

 const refreshIdb = async () => {
  try {
   setBusy(true);
   setMsg("");
   const snap = await openAndDumpIDB("trysnowball");
   setIdbSnapshot(snap);
   setShowIdb(true);
   setMsg("üì∏ IndexedDB snapshot captured.");
  } catch (e) {
   console.error(e);
   setMsg("‚ùå Couldn‚Äôt read IndexedDB.");
  } finally {
   setBusy(false);
  }
 };

 const totals = idbSnapshot ? computeIdbTotals(idbSnapshot) : null;

 return (
  <div className="p-4 mb-4 rounded-lg border bg-amber-50">
   <div className="flex items-center justify-between mb-2">
    <div className="font-semibold text-amber-900">Dev Tools: Storage Doctor</div>
    <div className="text-xs text-amber-700">{busy ? "Working‚Ä¶" : null}</div>
   </div>

   <div className="flex flex-wrap gap-2 mb-3">
    <button
     disabled={busy}
     onClick={run(async () => {
      await localDebtManager.clearAllData();
      await clearLegacyLocalStorage();
      setIdbSnapshot(null);
      setMsg("üß® Cleared IndexedDB and legacy localStorage.");
     })}
     className="px-3 py-1.5 rounded bg-gray-800 text-white disabled:opacity-50"
    >
     Nuke All (IDB + Legacy)
    </button>

    <button
     disabled={busy}
     onClick={run(async () => {
      await migrateLegacyToIndexedDB({ clearIndexFirst: true });
      setMsg("üîÅ Migrated legacy ‚Üí IndexedDB.");
     })}
     className="px-3 py-1.5 rounded bg-blue-600 text-white disabled:opacity-50"
    >
     Migrate Legacy ‚Üí IndexedDB
    </button>

    <button
     disabled={busy}
     onClick={run(seedFixed)}
     className="px-3 py-1.5 rounded bg-purple-600 text-white disabled:opacity-50"
    >
     Seed Fixed Demo (4)
    </button>

    <button
     disabled={busy}
     onClick={run(() => seedRandom(7))}
     className="px-3 py-1.5 rounded bg-indigo-600 text-white disabled:opacity-50"
    >
     Seed Random (7)
    </button>

    <button
     disabled={busy}
     onClick={refreshIdb}
     className="px-3 py-1.5 rounded bg-amber-900 text-white disabled:opacity-50"
    >
     Show IndexedDB Snapshot
    </button>

    {idbSnapshot && (
     <button
      disabled={busy}
      onClick={() => setShowIdb((s) => !s)}
      className="px-3 py-1.5 rounded bg-amber-700 text-white disabled:opacity-50"
     >
      {showIdb ? "Hide Snapshot" : "Show Snapshot"}
     </button>
    )}
   </div>

   {msg && <div className="text-sm text-amber-900 mb-3">{msg}</div>}

   {/* Legacy keys quick view */}
   <details className="mt-2">
    <summary className="cursor-pointer text-sm text-amber-900">Show legacy keys present</summary>
    <div className="mt-2 text-xs text-amber-900 space-y-2">
     {Object.keys(legacySnapshot).length === 0 ? (
      <div>No legacy keys present.</div>
     ) : (
      Object.entries(legacySnapshot).map(([k, v]) => (
       <div key={k}>
        <div className="font-mono font-semibold">{k}</div>
        <pre className="whitespace-pre-wrap break-all bg-white border rounded p-2">{JSON.stringify(v, null, 2)}</pre>
       </div>
      ))
     )}
    </div>
   </details>

   {/* IndexedDB snapshot panel */}
   {idbSnapshot && showIdb && (
    <div className="mt-4">
     <div className="text-sm font-semibold text-amber-900 mb-2">IndexedDB Snapshot (trysnowball)</div>

     {totals && (
      <div className="grid grid-cols-2 md:grid-cols-4 gap-2 mb-3 text-sm">
       <div className="p-2 bg-white rounded border">
        <div className="text-amber-700">Debts</div>
        <div className="font-mono">{totals.debtsCount}</div>
       </div>
       <div className="p-2 bg-white rounded border">
        <div className="text-amber-700">Payments</div>
        <div className="font-mono">{totals.paymentsCount}</div>
       </div>
       <div className="p-2 bg-white rounded border">
        <div className="text-amber-700">Total Balance (¬£)</div>
        <div className="font-mono">{totals.total}</div>
       </div>
       <div className="p-2 bg-white rounded border">
        <div className="text-amber-700">Total Min (¬£)</div>
        <div className="font-mono">{totals.minTotal}</div>
       </div>
      </div>
     )}

     {/* Debts table */}
     {totals && (
      <div className="overflow-auto rounded border bg-white">
       <table className="min-w-full text-sm">
        <thead className="bg-amber-100">
         <tr>
          <th className="text-left px-2 py-1">Order</th>
          <th className="text-left px-2 py-1">Name</th>
          <th className="text-right px-2 py-1">Balance (¬£)</th>
          <th className="text-right px-2 py-1">APR (%)</th>
          <th className="text-right px-2 py-1">Min (¬£)</th>
          <th className="text-left px-2 py-1">ID</th>
         </tr>
        </thead>
        <tbody>
         {totals.debtsTable.map((d) => (
          <tr key={d.id} className="odd:bg-white even:bg-amber-50">
           <td className="px-2 py-1">{d.order}</td>
           <td className="px-2 py-1">{d.name}</td>
           <td className="px-2 py-1 text-right">{d.balance}</td>
           <td className="px-2 py-1 text-right">{d.apr}</td>
           <td className="px-2 py-1 text-right">{d.min}</td>
           <td className="px-2 py-1 font-mono">{d.id}</td>
          </tr>
         ))}
         {totals.debtsTable.length === 0 && (
          <tr>
           <td className="px-2 py-2 text-center text-amber-700" colSpan={6}>
            No debts in IndexedDB.
           </td>
          </tr>
         )}
        </tbody>
       </table>
      </div>
     )}

     {/* Raw stores */}
     <details className="mt-3">
      <summary className="cursor-pointer text-sm text-amber-900">Show raw stores JSON</summary>
      <div className="mt-2 text-xs text-amber-900 space-y-2">
       {Object.entries(idbSnapshot).map(([store, rows]) => (
        <div key={store}>
         <div className="font-mono font-semibold">{store}</div>
         <pre className="whitespace-pre-wrap break-all bg-white border rounded p-2">{JSON.stringify(rows, null, 2)}</pre>
        </div>
       ))}
      </div>
     </details>
    </div>
   )}
  </div>
 );
}