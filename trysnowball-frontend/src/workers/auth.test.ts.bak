import { SELF, env } from "cloudflare:test";
import { describe, it, expect } from "vitest";

describe("Auth Worker", () => {
 it("responds to health check", async () => {
  const res = await SELF.fetch("http://dummy/auth/health");
  expect(res.status).toBe(200);
  
  const data = await res.json();
  expect(data.status).toBe("healthy");
  expect(data.worker).toBe("auth");
 });

 it("handles magic link request", async () => {
  const res = await SELF.fetch("http://dummy/auth/request-link", {
   method: "POST",
   headers: { "Content-Type": "application/json" },
   body: JSON.stringify({ email: "test@example.com" })
  });
  
  expect(res.status).toBe(200);
  const data = await res.json();
  expect(data.success).toBe(true);
 });

 it("rejects invalid JWT", async () => {
  const res = await SELF.fetch("http://dummy/auth/me", {
   headers: { "Authorization": "Bearer invalid-token" }
  });
  
  expect(res.status).toBe(401);
 });

 it("proves D1 binding works", async () => {
  // Test that we can interact with the database
  const res = await SELF.fetch("http://dummy/auth/health");
  expect(res.status).toBe(200);
  
  // The DB binding should be available
  expect(env.DB).toBeDefined();
 });
});