/**
 * CTA Selectors Hook
 * Smart CTA routing logic based on user state
 */

import { useMemo } from 'react';
import { useUserDebts } from '../useUserDebts';

export const useCtaSelectors = () => {
 const { debts, extraPayment, totalDebt } = useUserDebts();
 
 return useMemo(() => {
  // Priority 1: No debts added yet
  if (!debts || debts.length === 0) {
   return {
    kind: 'add-debts',
    priority: 1,
    reason: 'no_debts',
    urgency: 'high'
   };
  }
  
  // Priority 2: Has debts but no boost (most important for engagement)
  if (extraPayment === 0) {
   return {
    kind: 'try-boost',
    priority: 2, 
    reason: 'no_boost',
    urgency: 'high'
   };
  }
  
  // Priority 3: Check if balances are stale (> 30 days)
  const getBalanceStaleness = () => {
   try {
    const lastUpdated = localStorage.getItem('last_balance_update');
    if (!lastUpdated) {
     // No update timestamp - check if debts were recently added
     const hasRecentDebts = debts.some(debt => {
      const created = debt.created || debt.dateAdded;
      if (!created) return false;
      const daysSinceCreated = Math.floor((Date.now() - new Date(created)) / (1000 * 60 * 60 * 24));
      return daysSinceCreated <= 7; // Recent if added within a week
     });
     
     return hasRecentDebts ? 0 : 31; // Assume stale if no timestamp and old debts
    }
    
    const lastUpdateDate = new Date(lastUpdated);
    if (isNaN(lastUpdateDate.getTime())) return 31; // Invalid date
    
    const daysSince = Math.floor((Date.now() - lastUpdateDate) / (1000 * 60 * 60 * 24));
    return daysSince;
   } catch (error) {
    console.warn('Error checking balance staleness:', error);
    return 31; // Assume stale on error
   }
  };
  
  const daysSinceUpdate = getBalanceStaleness();
  if (daysSinceUpdate > 30) {
   return {
    kind: 'update-balances',
    priority: 3,
    reason: 'stale_balances',
    urgency: daysSinceUpdate > 60 ? 'high' : 'medium',
    daysSinceUpdate
   };
  }
  
  // Priority 4: Default - encourage snowflakes (extra payments)
  return {
   kind: 'log-snowflake',
   priority: 4,
   reason: 'encourage_snowflakes',
   urgency: 'low'
  };
 }, [debts, extraPayment, totalDebt]);
};

/**
 * Get CTA navigation path based on kind
 */
export const getCtaPath = (kind, extraData = {}) => {
 switch (kind) {
  case 'add-debts':
   return '/plan/debts';
  case 'try-boost':
   return '/plan/strategy'; // Go to strategy tab to see impact
  case 'log-snowflake':
   // Pre-fill with current boost amount if available
   const amount = extraData.currentBoost || 25;
   return `/plan/snowflakes?prefill=${amount}`;
  case 'update-balances':
   return '/plan/debts?modal=update-balances';
  default:
   return '/plan';
 }
};

/**
 * Get CTA analytics event data
 */
export const getCtaAnalytics = (ctaData, extraData = {}) => {
 return {
  cta_kind: ctaData.kind,
  cta_priority: ctaData.priority,
  cta_reason: ctaData.reason,
  cta_urgency: ctaData.urgency,
  user_has_debts: extraData.hasDebts || false,
  user_has_boost: extraData.hasBoost || false,
  days_since_balance_update: ctaData.daysSinceUpdate || 0,
  total_debt_pennies: extraData.totalDebtPennies || 0
 };
};