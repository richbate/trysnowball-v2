/**
 * Snowflake Selectors Hook
 * Read-only derived selectors for snowflake data
 */

import { useMemo } from 'react';
import { useUserDebts } from '../useUserDebts';
import { computeDebtTotals } from '../../selectors/debtTotals';
import { fromCents, bpsToPercent } from '../../lib/money';

export const useSnowflakeSelectors = () => {
 const { debts, extraPayment } = useUserDebts();
 
 return useMemo(() => {
  // Get snowflakes from localStorage (they're stored as one-time payments)
  const getSnowflakes = () => {
   try {
    const stored = localStorage.getItem('trysnowball_snowflakes');
    if (!stored) return [];
    
    const parsed = JSON.parse(stored);
    return Array.isArray(parsed) ? parsed : [];
   } catch (error) {
    console.warn('Error loading snowflakes:', error);
    return [];
   }
  };
  
  const snowflakes = getSnowflakes();
  
  // Calculate total snowflake amount in last 30 days
  const thirtyDaysAgo = new Date();
  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
  
  const recentSnowflakes = snowflakes.filter(s => 
   new Date(s.date || s.timestamp) >= thirtyDaysAgo
  );
  
  const totalAmount = recentSnowflakes.reduce((sum, s) => sum + (s.amount || 0), 0);
  const allTimeTotal = snowflakes.reduce((sum, s) => sum + (s.amount || 0), 0);
  
  // Calculate impact on debt payoff
  const calculateImpact = () => {
   if (!debts || debts.length === 0 || totalAmount === 0) {
    return { monthsSaved: 0, interestSaved: 0 };
   }
   
   // Use selector for consistent totals calculation
   const debtTotals = computeDebtTotals(debts);
   const avgMonthlyPayment = debtTotals.totalMinPayments + extraPayment;
   
   if (avgMonthlyPayment === 0) return { monthsSaved: 0, interestSaved: 0 };
   
   // Estimate months saved: snowflakes / monthly payment
   const monthsSaved = Math.round((totalAmount / avgMonthlyPayment) * 100) / 100;
   
   // Calculate weighted average APR using normalized fields
   const totalBalance = debts.reduce((sum, debt) => sum + debt.amount_pennies, 0);
   const weightedAprSum = debts.reduce((sum, debt) => {
    const weight = totalBalance > 0 ? debt.amount_pennies / totalBalance : 0;
    return sum + (bpsToPercent(debt.apr) * weight);
   }, 0);
   const avgRate = weightedAprSum;
   
   const interestSaved = Math.round(totalAmount * (avgRate / 100) * 0.5); // Conservative estimate
   
   return { monthsSaved, interestSaved };
  };
  
  const impact = calculateImpact();
  
  // Get recent activity for display
  const getRecentActivity = () => {
   return snowflakes
    .sort((a, b) => new Date(b.date || b.timestamp) - new Date(a.date || a.timestamp))
    .slice(0, 3)
    .map(s => ({
     id: s.id,
     amount: s.amount,
     date: s.date || s.timestamp,
     source: s.source || s.description || 'Extra payment'
    }));
  };
  
  return {
   totalAmount: Math.round(totalAmount * 100), // Convert to pennies for display
   allTimeTotal: Math.round(allTimeTotal * 100),
   count: recentSnowflakes.length,
   allTimeCount: snowflakes.length,
   monthsSaved: impact.monthsSaved,
   interestSaved: impact.interestSaved,
   hasSnowflakes: snowflakes.length > 0,
   hasRecentSnowflakes: recentSnowflakes.length > 0,
   recentActivity: getRecentActivity(),
   avgAmount: recentSnowflakes.length > 0 
    ? Math.round((totalAmount / recentSnowflakes.length) * 100)
    : 0
  };
 }, [debts, extraPayment]);
};