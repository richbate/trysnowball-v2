/**
 * Analytics with UserProfile Cohort Tracking & Demo Mode Protection
 * Wraps PostHog with automatic profile-based cohort data and demo mode guarding
 */

import { analytics as posthog } from './posthog';
import { loadUserProfile } from './userProfile';
import { getDemoMeta } from '../providers/DemoModeProvider';

// Events that should be blocked in demo mode to prevent funnel pollution
const GUARDED_EVENTS = new Set([
 'start_checkout',
 'begin_trial', 
 'checkout_opened',
 'subscribe_clicked',
 'subscription_started',
 'payment_submitted',
 'upgrade_clicked',
 'billing_opened',
 'premium_feature_clicked',
 'conversion_completed'
]);

/**
 * Track event with automatic profile cohort data and demo mode protection
 */
export function track(event, props = {}) {
 try {
  const { demo_mode, demo_profile, demo_entry } = getDemoMeta();
  
  // Block funnel events in demo mode
  if (demo_mode && GUARDED_EVENTS.has(event)) {
   console.log(`üõ°Ô∏è Blocked demo funnel event: ${event}`);
   return;
  }
  
  const profile = loadUserProfile();
  const cohort = {
   onboarding_journeyStage: profile.journeyStage || 'unknown',
   onboarding_debtFocus: (profile.debtFocus || []).join('|') || 'none',
  };
  
  // Add demo context to all events
  const eventProps = {
   ...props,
   ...cohort,
   demo_mode,
   ...(demo_mode && { demo_profile, demo_entry })
  };
  
  posthog.track(event, eventProps);
 } catch (error) {
  console.warn('Analytics track failed:', error);
 }
}

/**
 * Identify user with profile cohort data and demo mode protection
 */
export function identify(userId, traits = {}) {
 try {
  const { demo_mode } = getDemoMeta();
  
  if (demo_mode) {
   // Don't identify demo users
   console.log('üõ°Ô∏è Blocked user identification in demo mode');
   return;
  }
  
  const profile = loadUserProfile();
  const cohortTraits = {
   onboarding_journeyStage: profile.journeyStage || 'unknown',
   onboarding_debtFocus: (profile.debtFocus || []).join('|') || 'none',
   profile_updatedAt: profile.updatedAt || null
  };
  
  posthog.identify(userId, { ...traits, ...cohortTraits });
 } catch (error) {
  console.warn('Analytics identify failed:', error);
 }
}

/**
 * Set user properties with profile cohort data and demo mode protection
 */
export function setUserProperties(properties = {}) {
 try {
  const { demo_mode } = getDemoMeta();
  
  if (demo_mode) {
   // Don't set user properties in demo mode
   console.log('üõ°Ô∏è Blocked user properties in demo mode');
   return;
  }
  
  const profile = loadUserProfile();
  const cohortProperties = {
   onboarding_journeyStage: profile.journeyStage || 'unknown',
   onboarding_debtFocus: (profile.debtFocus || []).join('|') || 'none',
  };
  
  if (window.posthog) {
   window.posthog.people.set({ ...properties, ...cohortProperties });
  }
 } catch (error) {
  console.warn('Set user properties failed:', error);
 }
}

// Re-export other analytics functions
export { analytics } from './posthog';

export default {
 track,
 identify,
 setUserProperties
};